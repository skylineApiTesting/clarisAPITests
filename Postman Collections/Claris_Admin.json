{
  "info": {
    "_postman_id": "71e81480-2d7b-46b5-943e-9324e6366a28",
    "name": "Claris Admin",
    "description": "This collection contains a list of API tests which should be run in claris as an administrator.",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "_postman_id": "1d72d8b1-7bb8-4d10-946f-abd7ddbe6c61",
      "name": "Login",
      "description": null,
      "item": [
        {
          "_postman_id": "cdf13eb7-028f-4e6c-9406-ba5be69adc2a",
          "name": "Login - empty fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7494d48f-5453-44f6-8651-66cd83c876cf",
                "exec": [
                  "pm.test(\"C44085 Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"C44085 Error message is returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Missing credentials\");",
                  "});",
                  "",
                  "pm.test(\"C44085 Response time is less than 200ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"username\":\"\",\"password\":\"\",\"timezone\":\"America/New_York\"}"
            },
            "url": "https://{{url}}/api/login"
          },
          "response": []
        },
        {
          "_postman_id": "2c2a4e4b-12ac-4774-ab9f-d74fb2473853",
          "name": "Login - empty password",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8fc49549-7519-484b-a39e-b491df08cedf",
                "exec": [
                  "pm.test(\"C44086 Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"C44086 Error message is returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Missing credentials\");",
                  "});",
                  "",
                  "pm.test(\"C44086 Response time is less than 200ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"username\":\"{{current_user}}\",\"password\":\"\",\"timezone\":\"America/New_York\"}"
            },
            "url": "https://{{url}}/api/login"
          },
          "response": []
        },
        {
          "_postman_id": "a8a7fbdd-f9dd-4078-a81c-5a40aacfcaa5",
          "name": "Login - empty username",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "738b8741-a2e1-4301-8e7f-79af7b537f9a",
                "exec": [
                  "pm.test(\"C44087 Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"C44087 Error message is returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Missing credentials\");",
                  "});",
                  "",
                  "pm.test(\"C44087 Response time is less than 200ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"username\":\"\",\"password\":\"{{password}}\",\"timezone\":\"America/New_York\"}"
            },
            "url": "{{url}}/api/login"
          },
          "response": []
        },
        {
          "_postman_id": "261a83ec-7401-4d0f-8330-1cc92c1e2672",
          "name": "Login - incorrect password",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "46e89f5d-a0ab-48e7-9489-e352b1d88053",
                "exec": [
                  "pm.test(\"C44088 Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"C44088 Error message is returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid username or password\");",
                  "});",
                  "",
                  "pm.test(\"C44088 Response time is less than 200ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"username\":\"{{current_user}}\",\"password\":\"incorrectpassword\",\"timezone\":\"America/New_York\"}"
            },
            "url": "{{url}}/api/login"
          },
          "response": []
        },
        {
          "_postman_id": "485c519c-f75b-4a54-9fee-42da475fc2bf",
          "name": "Login - invalid username",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ac1e83ce-c916-4264-94f9-1a6760fff639",
                "exec": [
                  "pm.test(\"C45040 Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"C45040 Error message is returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid username or password\");",
                  "});",
                  "",
                  "pm.test(\"C45040 Response time is less than 200ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"username\":\"invaliduser\",\"password\":\"{{password}}\",\"timezone\":\"America/New_York\"}"
            },
            "url": "{{url}}/api/login"
          },
          "response": []
        },
        {
          "_postman_id": "42e82a5b-2bd4-4fbb-9b24-00042512416f",
          "name": "Login - special characters in username",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "905879cd-a46f-4c9d-8bde-c84f2eb2ebc1",
                "exec": [
                  "pm.test(\"C73583 Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"C73583 Error message is returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid username or password\");",
                  "});",
                  "",
                  "pm.test(\"C73583 Response time is less than 200ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"username\":\"{{special_characters}}\",\"password\":\"{{password}}\",\"timezone\":\"America/New_York\"}"
            },
            "url": "{{url}}/api/login",
            "description": "Logs a user into claris.\n\nTriggered by:\nLogging into the site.\n\nTests:\n1) Status code is 200\n2) Body contains a field called 'authenticated', and that field is equal to true\n3) Response time < 200ms"
          },
          "response": []
        },
        {
          "_postman_id": "4d3c78b6-1ac7-402e-b2e7-38d53c4ecab4",
          "name": "Login - special characters in password",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "755b6f70-42c9-4d2c-82ac-62000225883b",
                "exec": [
                  "pm.test(\"C73584 Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"C73584 Error message is returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid username or password\");",
                  "});",
                  "",
                  "pm.test(\"C73584 Response time is less than 200ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"username\":\"{{current_user}}\",\"password\":\"{{special_characters}}\",\"timezone\":\"America/New_York\"}"
            },
            "url": "{{url}}/api/login",
            "description": "Logs a user into claris.\n\nTriggered by:\nLogging into the site.\n\nTests:\n1) Status code is 200\n2) Body contains a field called 'authenticated', and that field is equal to true\n3) Response time < 200ms"
          },
          "response": []
        },
        {
          "_postman_id": "fd719c46-404d-42e9-b6e8-45660419a125",
          "name": "Login - correct password, incorrect case",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "648e57ad-688a-4c37-8431-ee88c0c47d44",
                "exec": [
                  "pm.test(\"C45042 Status code is 401\", function() {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"C45042 Error message is returned\", function() {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid username or password\");",
                  "});",
                  "",
                  "pm.test(\"C45042 Response time is less than 200ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"username\":\"{{current_user}}\",\"password\":\"{{uppercase_password}}\",\"timezone\":\"America/New_York\"}"
            },
            "url": "{{url}}/api/login"
          },
          "response": []
        },
        {
          "_postman_id": "1c5bb858-23b6-4ef9-a79f-42903d15702a",
          "name": "Login - capitalized username",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "534eb552-b03d-4d20-85f0-5bf080fb30df",
                "exec": [
                  "pm.test(\"C45041 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C45041 Authenticated is true\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.authenticated).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"C45041 Response time is less than 200ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"username\":\"{{uppercase_username}}\",\"password\":\"{{password}}\",\"timezone\":\"America/New_York\"}"
            },
            "url": "{{url}}/api/login"
          },
          "response": []
        },
        {
          "_postman_id": "fe5fc812-1818-436e-9b26-28428bf06d8d",
          "name": "Logout valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9cb51101-5c02-4a8b-85c7-97a37de2c7a7",
                "exec": [
                  "pm.test(\"C73585 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C73585 Success message is returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Logged out successfully\");",
                  "});",
                  "",
                  "pm.test(\"C73585 Response time is less than 200ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"username\":\"{{global_username}}\",\"password\":\"skyl1n3!\",\"timezone\":\"America/New_York\"}"
            },
            "url": "{{url}}/api/logout",
            "description": "Log out user."
          },
          "response": []
        },
        {
          "_postman_id": "12147546-b44c-4bcb-90a8-26731398175a",
          "name": "Login valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b766dff9-f008-4e55-920a-b67bf7f4d71e",
                "exec": [
                  "pm.test(\"C73586 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include('{\"authenticated\":true}');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"username\":\"global_admin\",\"password\":\"smfZMWZvf5EAGCWm\",\"timezone\":\"America/New_York\"}"
            },
            "url": "{{url}}/api/login",
            "description": "Logs a user into claris.\n\nTriggered by:\nLogging into the site.\n\nTests:\n1) Status code is 200\n2) Body contains a field called 'authenticated', and that field is equal to true\n3) Response time < 200ms"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "c621fcb8-8ff8-49e4-9049-4c3dd9f86afc",
      "name": "Roles",
      "description": "Grabs the roles and assigns them to the environment.",
      "item": [
        {
          "_postman_id": "2f3f6cba-19cd-4af1-8a25-1310c4eebca4",
          "name": "Get roles",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6f068a4e-f88e-48cc-8285-d6f1ddab6bc5",
                "exec": [
                  "pm.test(\"Verify global, local, and operator roles are available\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results._id) !== null;",
                  "    pm.environment.unset(\"global_role_id\");",
                  "    pm.environment.unset(\"local_role_id\");",
                  "    pm.environment.unset(\"operator_role_id\");",
                  "    pm.environment.set(\"global_role_id\",jsonData.results[0]._id);",
                  "    pm.environment.set(\"local_role_id\",jsonData.results[1]._id);",
                  "    pm.environment.set(\"operator_role_id\",jsonData.results[2]._id);",
                  "});",
                  "",
                  "pm.test(\"Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "pm.test(\"Verify that created and modified fields are included in the response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results[0]).to.have.property('created');",
                  "    pm.expect(jsonData.results[0]).to.have.property('modified');",
                  "});",
                  "",
                  "pm.test(\"Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "https://{{url}}/api/roles",
            "description": "gets the roles and assigns them to an environment variable."
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "d163a6fa-98ff-492c-8fba-3dc7211f01f1",
      "name": "Create Objects",
      "description": null,
      "item": [
        {
          "_postman_id": "c127a89a-7249-4b45-b9f0-8aa67efff5ed",
          "name": "Create Organization",
          "description": null,
          "item": [
            {
              "_postman_id": "9eb4d9e5-f8c7-42f8-a34d-4ab09c5afaaa",
              "name": "Create org - empty fields",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8040122c-628e-434a-a00b-feb563d9a8fa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44265 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var organization_Name = pm.environment.get(\"organization_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "   // pm.expect(jsonData.results.name).to.eql(organization_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"No value for name received. name is a required field for organization\",",
                      "        \"No value for contact received. contact is a required field for organization\",",
                      "        \"No value for phone received. phone is a required field for organization\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44265 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44265 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});",
                      "",
                      "pm.test(\"C44265 Response time is less than 200ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(200);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"\",\n  \"contact\": \"\",\n  \"phone\": \"\",\n  \"recordVideo\": false,\n  \"videoRetentionNotes\": \"\",\n  \"primaryLocationName\": \"\",\n  \"primaryLocationAddress\": \"\",\n  \"primaryLocationCity\": \"\",\n  \"primaryLocationState\": \"\",\n  \"primaryLocationZipcode\": \"\",\n  \"administratorName\": {\n    \"first\": \"\",\n    \"last\": \"\"\n  },\n  \"administratorTitle\": \"\",\n  \"administratorEmail\": \"\",\n  \"administratorPhone\": \"\",\n  \"videoAdministratorName\": {\n    \"first\": \"\",\n    \"last\": \"\"\n  },\n  \"videoAdministratorTitle\": \"\",\n  \"videoAdministratorEmail\": \"\",\n  \"videoAdministratorPhone\": \"\",\n  \"authType\": \"Local Authentication\",\n  \"ldapConfig\": null\n}"
                },
                "url": "http://{{url}}/api/organizations",
                "description": "creates an organization. sets org name and org id as environment variables. these variables are used by the patch and delete organization api tests.\n\ntriggered by:\nfilling out the add organization page and submitting the page\n\ntests:\n1) id is not null - this test also sets the org id and org name fields\n2) status code is 200\n3) response time is less than 200 ms"
              },
              "response": []
            },
            {
              "_postman_id": "50fbff02-7fa4-4693-acdb-46ce92482c1b",
              "name": "Create org - under 3 chars",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "00844145-eddc-4f85-85d3-99441f4163ee",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44266 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var organization_Name = pm.environment.get(\"organization_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "   // pm.expect(jsonData.results.name).to.eql(organization_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"organization name did not meet minimum length of 3.\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44266 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44266 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});",
                      "",
                      "pm.test(\"C44266 Response time is less than 200ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(200);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"2C\",\n  \"contact\": \"Jenn\",\n  \"phone\": \"4439041286\",\n  \"recordVideo\": false,\n  \"videoRetentionNotes\": \"\",\n  \"primaryLocationName\": \"\",\n  \"primaryLocationAddress\": \"\",\n  \"primaryLocationCity\": \"\",\n  \"primaryLocationState\": \"\",\n  \"primaryLocationZipcode\": \"\",\n  \"administratorName\": {\n    \"first\": \"\",\n    \"last\": \"\"\n  },\n  \"administratorTitle\": \"\",\n  \"administratorEmail\": \"\",\n  \"administratorPhone\": \"\",\n  \"videoAdministratorName\": {\n    \"first\": \"\",\n    \"last\": \"\"\n  },\n  \"videoAdministratorTitle\": \"\",\n  \"videoAdministratorEmail\": \"\",\n  \"videoAdministratorPhone\": \"\",\n  \"authType\": \"Local Authentication\",\n  \"ldapConfig\": null\n}"
                },
                "url": "http://{{url}}/api/organizations",
                "description": "creates an organization. sets org name and org id as environment variables. these variables are used by the patch and delete organization api tests.\n\ntriggered by:\nfilling out the add organization page and submitting the page\n\ntests:\n1) id is not null - this test also sets the org id and org name fields\n2) status code is 200\n3) response time is less than 200 ms"
              },
              "response": []
            },
            {
              "_postman_id": "b44e9fe6-d62f-4e9b-b157-50ef1281aaea",
              "name": "Create org - over 80 chars",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b140fc9c-8871-40bf-a9e8-20ebe1056106",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44267 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var organization_Name = pm.environment.get(\"organization_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "   // pm.expect(jsonData.results.name).to.eql(organization_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"organization name exceeded maximum length of 80.\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44267 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44267 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});",
                      "",
                      "pm.test(\"C44267 Response time is less than 200ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(200);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"12345678901234567890123456789012345678901234567890123456789012345678{{$randomInt}}\",\n  \"contact\": \"Jenn\",\n  \"phone\": \"4439041286\",\n  \"recordVideo\": false,\n  \"videoRetentionNotes\": \"\",\n  \"primaryLocationName\": \"\",\n  \"primaryLocationAddress\": \"\",\n  \"primaryLocationCity\": \"\",\n  \"primaryLocationState\": \"\",\n  \"primaryLocationZipcode\": \"\",\n  \"administratorName\": {\n    \"first\": \"\",\n    \"last\": \"\"\n  },\n  \"administratorTitle\": \"\",\n  \"administratorEmail\": \"\",\n  \"administratorPhone\": \"\",\n  \"videoAdministratorName\": {\n    \"first\": \"\",\n    \"last\": \"\"\n  },\n  \"videoAdministratorTitle\": \"\",\n  \"videoAdministratorEmail\": \"\",\n  \"videoAdministratorPhone\": \"\",\n  \"authType\": \"Local Authentication\",\n  \"ldapConfig\": null\n}"
                },
                "url": "http://{{url}}/api/organizations",
                "description": "creates an organization. sets org name and org id as environment variables. these variables are used by the patch and delete organization api tests.\n\ntriggered by:\nfilling out the add organization page and submitting the page\n\ntests:\n1) id is not null - this test also sets the org id and org name fields\n2) status code is 200\n3) response time is less than 200 ms"
              },
              "response": []
            },
            {
              "_postman_id": "a835196a-e465-4de6-9693-a8563e893b6d",
              "name": "Create org - invalid characters",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07f32888-71d3-471d-8408-f8a64987157e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44268 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var organization_Name = pm.environment.get(\"organization_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "   // pm.expect(jsonData.results.name).to.eql(organization_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"organization name Must only contain alphanumeric characters and/or /.,!@#%&()_'\\\";:?+= -\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44268 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44268 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});",
                      "",
                      "pm.test(\"C44268 Response time is less than 200ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(200);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"{{special_characters}\",\n  \"contact\": \"Jenn\",\n  \"phone\": \"4439041286\",\n  \"recordVideo\": false,\n  \"videoRetentionNotes\": \"\",\n  \"primaryLocationName\": \"\",\n  \"primaryLocationAddress\": \"\",\n  \"primaryLocationCity\": \"\",\n  \"primaryLocationState\": \"\",\n  \"primaryLocationZipcode\": \"\",\n  \"administratorName\": {\n    \"first\": \"\",\n    \"last\": \"\"\n  },\n  \"administratorTitle\": \"\",\n  \"administratorEmail\": \"\",\n  \"administratorPhone\": \"\",\n  \"videoAdministratorName\": {\n    \"first\": \"\",\n    \"last\": \"\"\n  },\n  \"videoAdministratorTitle\": \"\",\n  \"videoAdministratorEmail\": \"\",\n  \"videoAdministratorPhone\": \"\",\n  \"authType\": \"Local Authentication\",\n  \"ldapConfig\": null\n}"
                },
                "url": "http://{{url}}/api/organizations",
                "description": "creates an organization. sets org name and org id as environment variables. these variables are used by the patch and delete organization api tests.\n\ntriggered by:\nfilling out the add organization page and submitting the page\n\ntests:\n1) id is not null - this test also sets the org id and org name fields\n2) status code is 200\n3) response time is less than 200 ms"
              },
              "response": []
            },
            {
              "_postman_id": "850b7d44-84de-4e44-9d30-871b7e740b04",
              "name": "Create an organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a6818daf-b23a-46c9-aa91-b3974a982f69",
                    "exec": [
                      "",
                      "pm.test(\"C44274 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "    pm.environment.unset(\"organization_ID\");",
                      "    pm.environment.unset(\"organization_Name\");",
                      "    pm.environment.set(\"organization_ID\",jsonData.results._id);",
                      "    pm.environment.set(\"organization_Name\",jsonData.results.name);",
                      "});",
                      "",
                      "pm.test(\"C44274 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var organization_Name = pm.environment.get(\"organization_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(organization_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44274 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44274 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44274 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});",
                      "",
                      "pm.test(\"C44274 Response time is less than 200ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(200);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"test organization {{$timestamp}}\",\n  \"contact\": \"{{contact}}\",\n  \"phone\": \"{{valid_phone}}\",\n  \"recordVideo\": false,\n  \"videoRetentionNotes\": \"API Create Org Test\",\n  \"primaryLocationName\": \"\",\n  \"primaryLocationAddress\": \"\",\n  \"primaryLocationCity\": \"\",\n  \"primaryLocationState\": \"\",\n  \"primaryLocationZipcode\": \"\",\n  \"administratorName\": {\n    \"first\": \"\",\n    \"last\": \"\"\n  },\n  \"administratorTitle\": \"\",\n  \"administratorEmail\": \"\",\n  \"administratorPhone\": \"\",\n  \"videoAdministratorName\": {\n    \"first\": \"\",\n    \"last\": \"\"\n  },\n  \"videoAdministratorTitle\": \"\",\n  \"videoAdministratorEmail\": \"\",\n  \"videoAdministratorPhone\": \"\",\n  \"authType\": \"Local Authentication\",\n  \"ldapConfig\": null\n}"
                },
                "url": "http://{{url}}/api/organizations",
                "description": "creates an organization. sets org name and org id as environment variables. these variables are used by the patch and delete organization api tests.\n\ntriggered by:\nfilling out the add organization page and submitting the page\n\ntests:\n1) id is not null - this test also sets the org id and org name fields\n2) status code is 200\n3) response time is less than 200 ms"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "da82da7d-6f81-42eb-90d3-df16b649e5c6",
          "name": "Create Region",
          "description": null,
          "item": [
            {
              "_postman_id": "0db03873-0733-4c39-9fb8-f05d3bb6e63d",
              "name": "Create region",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e47ab61-0214-4a48-9745-dced9b436799",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44352 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "    pm.environment.unset(\"region_ID\");",
                      "    pm.environment.unset(\"region_Name\");",
                      "    pm.environment.set(\"region_ID\",jsonData.results._id);",
                      "    pm.environment.set(\"region_Name\",jsonData.results.name);",
                      "});",
                      "",
                      "pm.test(\"C44352 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var region_Name = pm.environment.get(\"region_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(region_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44352 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44352 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44352 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"Region {{$timestamp}}\",\n\t\"description\": \"a test region.\"\n}"
                },
                "url": "http://{{url}}/api/regions",
                "description": "adds a region with a random integer."
              },
              "response": []
            },
            {
              "_postman_id": "ba4f4ca3-23c1-401e-bb69-4cbca574ac29",
              "name": "Create region - empty",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bf0d196a-896b-4f7e-8069-91fb02615d48",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44344 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var region_Name = pm.environment.get(\"region_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"No value for name received. name is a required field for region\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44344 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44344 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"\",\n\t\"description\": \"a test region.\"\n}"
                },
                "url": "http://{{url}}/api/regions",
                "description": "adds a region with empty information"
              },
              "response": []
            },
            {
              "_postman_id": "680f99bf-8b1d-40d7-ac52-0ad47831effa",
              "name": "Create region - under 3 chars",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78961c7b-a629-4694-be03-410205e420d0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44345 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var region_Name = pm.environment.get(\"region_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"region name did not meet minimum length of 3.\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44345 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44345 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"po\",\n\t\"description\": \"a test region.\"\n}"
                },
                "url": "http://{{url}}/api/regions",
                "description": "adds a region with under 3 chars"
              },
              "response": []
            },
            {
              "_postman_id": "e2b64776-31c6-4eb0-9a11-ea0ba6e38847",
              "name": "Create region - over 80 chars",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372bef32-a0e6-4ac8-994b-e9b731b795d3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44346 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var region_Name = pm.environment.get(\"region_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"region name exceeded maximum length of 80.\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44346 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44346 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"1234567890123456789012345678901234567890123456789012345678901234567890{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}\",\n\t\"description\": \"a test region.\"\n}"
                },
                "url": "http://{{url}}/api/regions",
                "description": "adds a region with over 80 chars"
              },
              "response": []
            },
            {
              "_postman_id": "ee1febfb-c041-420e-9842-3ef27271e56a",
              "name": "Create region - invalid characters",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1a4f4606-ecfb-4328-a812-9c44bbb941a4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44347 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var region_Name = pm.environment.get(\"region_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"region name Must only contain alphanumeric characters and/or /.,!@#%&()_'\\\";:?+= -\",",
                      "        \"region name must not contain HTML Tags.\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44347 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44347 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"{{special_characters}}\",\n\t\"description\": \"a test region.\"\n}"
                },
                "url": "http://{{url}}/api/regions",
                "description": "adds a region with invalid characters"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "f9565fc4-c4a2-46c0-90a9-8173b7224e7c",
          "name": "Create marker/device group level",
          "description": null,
          "item": [
            {
              "_postman_id": "2ed4cd74-e684-4a5e-958c-8451068e807e",
              "name": "Create marker device group level",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ca5ffe9d-ae28-4874-996c-91d09dced8c4",
                    "exec": [
                      "pm.environment.unset(\"marker_dg_level_Name\");",
                      "",
                      "var marker_dg_level_Name = Math.floor((Math.random() * 1000000) + 1);",
                      "",
                      "pm.environment.set(\"marker_dg_level_Name\", \"Marker device group \" + marker_dg_level_Name.toString());"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "1598bf31-b61d-4821-80d8-59d53c949676",
                    "exec": [
                      "pm.test(\"C54419 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "    pm.environment.unset(\"marker_dg_level_ID\");",
                      "    pm.environment.set(\"marker_dg_level_ID\",jsonData.results._id);",
                      "});",
                      "",
                      "pm.test(\"C54419 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var marker_dg_level_Name = pm.environment.get(\"marker_dg_level_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(marker_dg_level_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C54419 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C54419 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C54419 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"{{marker_dg_level_Name}}\",\n\t\"description\": \"this is a test marker/device group created through the api\"\n}"
                },
                "url": "https://{{url}}/api/markerLevels"
              },
              "response": []
            },
            {
              "_postman_id": "0552b770-a5aa-4892-bfef-c99158b11a02",
              "name": "Create marker device group level - empty",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ca5ffe9d-ae28-4874-996c-91d09dced8c4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset(\"marker_dg_level_Name\");",
                      "",
                      "var marker_dg_level_Name = Math.floor((Math.random() * 1000000) + 1);",
                      "",
                      "pm.environment.set(\"marker_dg_level_Name\", \"Marker device group \" + marker_dg_level_Name.toString());"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "9036b387-d30b-4cdb-a559-3923a8e2a41c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C54415 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var marker_dg_level_Name = pm.environment.get(\"marker_dg_level_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"No value for name received. name is a required field for markerLevel\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C54415 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C54415 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"\",\n\t\"description\": \"this is a test marker/device group created through the api\"\n}"
                },
                "url": "http://{{url}}/api/markerLevels",
                "description": "tries to create a marker device group level with an empty title"
              },
              "response": []
            },
            {
              "_postman_id": "3486c012-72ea-4a10-a6de-2b29b59c757e",
              "name": "Create marker device group level - under 3 chars",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ca5ffe9d-ae28-4874-996c-91d09dced8c4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset(\"marker_dg_level_Name\");",
                      "",
                      "var marker_dg_level_Name = Math.floor((Math.random() * 1000000) + 1);",
                      "",
                      "pm.environment.set(\"marker_dg_level_Name\", \"Marker device group \" + marker_dg_level_Name.toString());"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "1e68ed2c-b838-4a19-8eaf-cef9e7317a5c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C54416 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var marker_dg_level_Name = pm.environment.get(\"marker_dg_level_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"markerLevel name did not meet minimum length of 3.\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C54416 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C54416 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"po\",\n\t\"description\": \"this is a test marker/device group created through the api\"\n}"
                },
                "url": "http://{{url}}/api/markerLevels",
                "description": "tries to create a marker device group level with under 3 chars"
              },
              "response": []
            },
            {
              "_postman_id": "fe4bf486-2355-4fe8-a922-a8a2e09f8631",
              "name": "Create marker device group level - over 80 chars",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ca5ffe9d-ae28-4874-996c-91d09dced8c4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset(\"marker_dg_level_Name\");",
                      "",
                      "var marker_dg_level_Name = Math.floor((Math.random() * 1000000) + 1);",
                      "",
                      "pm.environment.set(\"marker_dg_level_Name\", \"Marker device group \" + marker_dg_level_Name.toString());"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dcc31826-5aab-4b26-b4a4-401dae56b9b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C54417 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var marker_dg_level_Name = pm.environment.get(\"marker_dg_level_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"markerLevel name exceeded maximum length of 80.\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C54417 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C54417 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"1234567890123456789012345678901234567890123456789012345678901234567890{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}\",\n\t\"description\": \"this is a test marker/device group created through the api\"\n}"
                },
                "url": "http://{{url}}/api/markerLevels",
                "description": "tries to create a marker device group level with over 80 chars"
              },
              "response": []
            },
            {
              "_postman_id": "c4569ca6-d255-4d83-a4c6-fea22d51bb9a",
              "name": "Create marker device group level - invalid characters",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ca5ffe9d-ae28-4874-996c-91d09dced8c4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset(\"marker_dg_level_Name\");",
                      "",
                      "var marker_dg_level_Name = Math.floor((Math.random() * 1000000) + 1);",
                      "",
                      "pm.environment.set(\"marker_dg_level_Name\", \"Marker device group \" + marker_dg_level_Name.toString());"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "8504b8fa-7890-4e94-b10c-18a046594cde",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C54418 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var marker_dg_level_Name = pm.environment.get(\"marker_dg_level_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"markerLevel name Must only contain alphanumeric characters and/or /.,!@#%&()_'\\\";:?+= -\",",
                      "        \"markerLevel name must not contain HTML Tags.\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C54418 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C54418 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"{{special_characters}}\",\n\t\"description\": \"this is a test marker/device group created through the api\"\n}"
                },
                "url": "http://{{url}}/api/markerLevels",
                "description": "tries to create a marker device group level with invalid characters"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "b1e34e91-f3c2-4539-9d01-c10a1911c26d",
          "name": "Create marker",
          "description": null,
          "item": [
            {
              "_postman_id": "4b44df23-bcbd-4b66-b053-63812c0f15a3",
              "name": "Create marker",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "375e1a2e-c314-436b-8267-a7f4c23cea97",
                    "type": "text/javascript",
                    "exec": [
                      "//Sets env variables for marker",
                      "pm.test(\"C44850 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "    pm.environment.unset(\"marker_ID\");",
                      "    pm.environment.unset(\"marker_Name\");",
                      "    pm.environment.set(\"marker_ID\",jsonData.results._id);",
                      "    pm.environment.set(\"marker_Name\",jsonData.results.title);",
                      "});",
                      "",
                      "pm.test(\"C44850 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var marker_Name = pm.environment.get(\"marker_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.title).to.eql(marker_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44850 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44850 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44850 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"server\": \"8.15.251.118\",\n\t\"stream\": \"dvg5wlp4k825rpmeef4x2058s4g0oj88\",\n\t\"dynamic\": false,\n\t\"prerollPort\": null,\n\t\"title\": \"Marker {{$randomInt}}{{$randomInt}}\",\n\t\"loc\": {\n\t\t\"type\": \"Point\",\n\t\t\"coordinates\": [\n\t\t\t\"-76.6246886\",\n\t\t\t\"39.1626084\"\n\t\t]\n\t},\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"region_id\": \"{{region_ID}}\",\n\t\"level_id\": \"{{marker_dg_level_ID}}\",\n\t\"type_id\": \"{{camera_type_id}}\",\n\t\"devgroups\": [\n\t],\n\t\"inactive\": false\n}"
                },
                "url": "http://{{url}}/api/markers",
                "description": "Creates a marker for the organization currently stored in the environment."
              },
              "response": []
            },
            {
              "_postman_id": "1eadb01e-9dd7-4c88-b2cc-b282992d4ce8",
              "name": "Create marker - Empty",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6fcd7e35-e221-4220-a433-d1cb034cd90b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44847 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var marker_Name = pm.environment.get(\"marker_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"No value for title received. title is a required field for marker\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44847 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44847 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"server\": \"8.15.251.118\",\n\t\"stream\": \"dvg5wlp4k825rpmeef4x2058s4g0oj88\",\n\t\"dynamic\": false,\n\t\"prerollPort\": null,\n\t\"title\": \"\",\n\t\"loc\": {\n\t\t\"type\": \"Point\",\n\t\t\"coordinates\": [\n\t\t\t\"-76.6246886\",\n\t\t\t\"39.1626084\"\n\t\t]\n\t},\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"region_id\": \"{{region_ID}}\",\n\t\"level_id\": \"{{marker_dg_level_ID}}\",\n\t\"type_id\": \"{{camera_type_id}}\",\n\t\"devgroups\": [\n\t],\n\t\"inactive\": false\n}"
                },
                "url": "http://{{url}}/api/markers",
                "description": "Creates a marker for the organization currently stored in the environment."
              },
              "response": []
            },
            {
              "_postman_id": "e7c7b251-d3b5-4f01-8773-4baa21803cbc",
              "name": "Create marker - Under 3 chars",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e21e7b89-f716-4700-bdaa-ce4c41b2caa2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44848 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var marker_Name = pm.environment.get(\"marker_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"marker name did not meet minimum length of 3.\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44848 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44848 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"server\": \"8.15.251.118\",\n\t\"stream\": \"dvg5wlp4k825rpmeef4x2058s4g0oj88\",\n\t\"dynamic\": false,\n\t\"prerollPort\": null,\n\t\"title\": \"Hi\",\n\t\"loc\": {\n\t\t\"type\": \"Point\",\n\t\t\"coordinates\": [\n\t\t\t\"-76.6246886\",\n\t\t\t\"39.1626084\"\n\t\t]\n\t},\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"region_id\": \"{{region_ID}}\",\n\t\"level_id\": \"{{marker_dg_level_ID}}\",\n\t\"type_id\": \"{{camera_type_id}}\",\n\t\"devgroups\": [\n\t],\n\t\"inactive\": false\n}"
                },
                "url": "http://{{url}}/api/markers",
                "description": "Creates a marker for the organization currently stored in the environment."
              },
              "response": []
            },
            {
              "_postman_id": "04a37e82-cc04-4db6-8f7a-34bbc48070e7",
              "name": "Create marker - Over 80 chars",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a19fbb3-943b-44e7-b70a-bac42ee24a57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44849 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var marker_Name = pm.environment.get(\"marker_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"marker title exceeded maximum length of 80.\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44849 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44849 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"server\": \"8.15.251.118\",\n\t\"stream\": \"dvg5wlp4k825rpmeef4x2058s4g0oj88\",\n\t\"dynamic\": false,\n\t\"prerollPort\": null,\n\t\"title\": \"RicqrKSGINUtMkeSaRmWvgsSnERehvPCRIYIsctHgIguXClPnWIlqJtibdGmDvZAlpfRXQlGQvWgKcAmY\",\n\t\"loc\": {\n\t\t\"type\": \"Point\",\n\t\t\"coordinates\": [\n\t\t\t\"-76.6246886\",\n\t\t\t\"39.1626084\"\n\t\t]\n\t},\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"region_id\": \"{{region_ID}}\",\n\t\"level_id\": \"{{marker_dg_level_ID}}\",\n\t\"type_id\": \"{{camera_type_id}}\",\n\t\"devgroups\": [\n\t],\n\t\"inactive\": false\n}"
                },
                "url": "http://{{url}}/api/markers",
                "description": "Creates a marker for the organization currently stored in the environment."
              },
              "response": []
            },
            {
              "_postman_id": "5bfcd1f9-1551-499b-880b-280f8b993f64",
              "name": "Create marker - Invalid chars",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3706dc9-6b37-4a6b-a9e9-ea9dcb7acfdb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44858 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var marker_Name = pm.environment.get(\"marker_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"marker title Must only contain alphanumeric characters and/or /.,!@#%&()_'\\\";:?+= -\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44858 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44858 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"server\": \"8.15.251.118\",\n\t\"stream\": \"dvg5wlp4k825rpmeef4x2058s4g0oj88\",\n\t\"dynamic\": false,\n\t\"prerollPort\": null,\n\t\"title\": \"{{ special_characters }}\",\n\t\"loc\": {\n\t\t\"type\": \"Point\",\n\t\t\"coordinates\": [\n\t\t\t\"-76.6246886\",\n\t\t\t\"39.1626084\"\n\t\t]\n\t},\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"region_id\": \"{{region_ID}}\",\n\t\"level_id\": \"{{marker_dg_level_ID}}\",\n\t\"type_id\": \"{{camera_type_id}}\",\n\t\"devgroups\": [\n\t],\n\t\"inactive\": false\n}"
                },
                "url": "http://{{url}}/api/markers",
                "description": "Creates a marker for the organization currently stored in the environment."
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "8d973db0-50e9-4f0f-bb94-d7911c60c8ad",
          "name": "Create alert",
          "description": null,
          "item": [
            {
              "_postman_id": "1fc9e77a-265e-401f-b9b4-e142382cd524",
              "name": "Create alert",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6a4ec9c1-a051-4591-8efd-eb967ae8eb03",
                    "type": "text/javascript",
                    "exec": [
                      "var d = new Date();",
                      "var start_time = d.getTime();",
                      "console.log(start_time);",
                      "",
                      "var end_time = start_time + 10000000;",
                      "console.log(end_time);",
                      "",
                      "pm.environment.set(\"start_time\", start_time);",
                      "pm.environment.set(\"end_time\", end_time);"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "053ca4be-c767-40e0-826b-e66228278044",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44585 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "    pm.environment.unset(\"alert_ID\");",
                      "    pm.environment.unset(\"alert_Name\");",
                      "    pm.environment.set(\"alert_ID\",jsonData.results._id);",
                      "    pm.environment.set(\"alert_Name\",jsonData.results.title);",
                      "});",
                      "",
                      "pm.test(\"C44585 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var alert_Name = pm.environment.get(\"alert_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.title).to.eql(alert_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44585 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44585 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"title\": \"Alert {{$randomInt}}\",\n\t\"message_body\": \"This is a test alert through postman.\",\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"systemWide\": {\n\t\t\"authenticated\": false,\n\t\t\"unauthenticated\": false\n\t},\n\t\"start_time\": {{start_time}},\n\t\"end_time\": {{end_time}},\n\t\"target_organizations\": [],\n\t\"allOrgs\": false\n}"
                },
                "url": "http://{{url}}/api/alerts",
                "description": "creates a new alert for a new organization"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "f8dda368-1b96-4f38-9183-cb4c3833cd7d",
          "name": "Create user level",
          "description": null,
          "item": [
            {
              "_postman_id": "5c352814-00c8-4fd4-9d0f-18bfb97b8906",
              "name": "Create user level",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9eb1bd0e-5f36-4d7f-81cb-3830d6034bc1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset(\"user_Level_Name\");",
                      "",
                      "var user_Level_Name = Math.floor((Math.random() * 1000000) + 1);",
                      "",
                      "pm.environment.set(\"user_Level_Name\", \"User Level \" + user_Level_Name.toString());"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "0d04f4f8-091d-4811-bcad-2539d984756b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C54403 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "    pm.environment.unset(\"user_Level_ID\");",
                      "    pm.environment.set(\"user_Level_ID\",jsonData.results._id);",
                      "});",
                      "",
                      "pm.test(\"C54403 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var user_Level_Name = pm.environment.get(\"user_Level_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(user_Level_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C54403 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C54403 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C54403 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"{{user_Level_Name}}\",\n\t\"description\": \"User level created through API tests.\"\n}"
                },
                "url": "http://{{url}}/api/userLevels"
              },
              "response": []
            },
            {
              "_postman_id": "a61ca2ad-dbaf-42b0-a29c-2f42e6726baa",
              "name": "Create user level - empty",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9eb1bd0e-5f36-4d7f-81cb-3830d6034bc1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset(\"user_Level_Name\");",
                      "",
                      "var user_Level_Name = Math.floor((Math.random() * 1000000) + 1);",
                      "",
                      "pm.environment.set(\"user_Level_Name\", \"User Level \" + user_Level_Name.toString());"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "16ae344e-4adc-404e-832f-984775e03d4c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C54399 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var user_Level_Name = pm.environment.get(\"user_Level_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"No value for name received. name is a required field for userLevel\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C54399 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C54399 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"\",\n\t\"description\": \"User level created through API tests.\"\n}"
                },
                "url": "http://{{url}}/api/userLevels",
                "description": "attempts to create a user with empty fields"
              },
              "response": []
            },
            {
              "_postman_id": "55248a12-3f0f-453a-bced-fa2cf443f5b1",
              "name": "Create user level - under 3 chars",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9eb1bd0e-5f36-4d7f-81cb-3830d6034bc1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset(\"user_Level_Name\");",
                      "",
                      "var user_Level_Name = Math.floor((Math.random() * 1000000) + 1);",
                      "",
                      "pm.environment.set(\"user_Level_Name\", \"User Level \" + user_Level_Name.toString());"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5335b9eb-4831-47bf-99a7-a687efcf20c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C54400 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var user_Level_Name = pm.environment.get(\"user_Level_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"userLevel name did not meet minimum length of 3.\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C54400 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C54400 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"po\",\n\t\"description\": \"User level created through API tests.\"\n}"
                },
                "url": "http://{{url}}/api/userLevels",
                "description": "attempts to create a user level with under 3 chars"
              },
              "response": []
            },
            {
              "_postman_id": "80f380eb-44cd-45ea-8544-21bd29336719",
              "name": "Create user level - over 80 chars",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9eb1bd0e-5f36-4d7f-81cb-3830d6034bc1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset(\"user_Level_Name\");",
                      "",
                      "var user_Level_Name = Math.floor((Math.random() * 1000000) + 1);",
                      "",
                      "pm.environment.set(\"user_Level_Name\", \"User Level \" + user_Level_Name.toString());"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "1385d431-3d3d-404b-9da9-3e54d4514ce3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C54401 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var user_Level_Name = pm.environment.get(\"user_Level_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"userLevel name exceeded maximum length of 80.\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C54401 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C54401 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"1234567890123456789012345678901234567890123456789012345678901234567890{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}\",\n\t\"description\": \"User level created through API tests.\"\n}"
                },
                "url": "http://{{url}}/api/userLevels",
                "description": "attempts to create a user level with over 80 chars"
              },
              "response": []
            },
            {
              "_postman_id": "8ca5c99b-d16a-43ef-9240-a61f8957b930",
              "name": "Create user level - invalid characters",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9eb1bd0e-5f36-4d7f-81cb-3830d6034bc1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset(\"user_Level_Name\");",
                      "",
                      "var user_Level_Name = Math.floor((Math.random() * 1000000) + 1);",
                      "",
                      "pm.environment.set(\"user_Level_Name\", \"User Level \" + user_Level_Name.toString());"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "0475b9ca-9fe6-4c37-af56-263cba375a57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C54402 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var user_Level_Name = pm.environment.get(\"user_Level_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"userLevel name Must only contain alphanumeric characters and/or /.,!@#%&()_'\\\";:?+= -\",",
                      "        \"userLevel name must not contain HTML Tags.\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C54402 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C54402 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"{{special_characters}}\",\n\t\"description\": \"User level created through API tests.\"\n}"
                },
                "url": "http://{{url}}/api/userLevels",
                "description": "attempts to create a user level with invalid characters"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "f061712c-33f2-486e-a82d-6a7588947fa6",
          "name": "Create user",
          "description": null,
          "item": [
            {
              "_postman_id": "92cb7d8e-f8ad-41d8-b412-6d723082f05e",
              "name": "Add user invalid - invalid characters",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5115585d-a722-4f21-ad06-67e406c76939",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44691 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results) === null;",
                      "});",
                      "",
                      "pm.test(\"C44691 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var user_Name = pm.environment.get(\"user_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([\"user username Must only contain alphanumeric characters and/or /.,!@#%&()_'\\\";:?+= -\"]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44691 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C44691 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"username\": \"#$^&#*$&#$^*\",\n\t\"role_id\": \"{{user_operator_id}}\",\n\t\"name\": {\n\t\t\"first\": \"Nancy\",\n\t\t\"last\": \"Williams\"\n\t},\n\t\"email\": \"nwilliams{{$timestamp}}@test.com\",\n\t\"phones\": [],\n\t\"credentials\": [],\n\t\"level_id\": \"{{user_Level_ID}}\",\n\t\"regions\": [\n\t],\n\t\"jobTitle\": \"Camera Tech\",\n\t\"department\": \"VDOT\",\n\t\"jobFunction\": \"123\",\n\t\"password\": \"{{password}}\",\n\t\"devgroups\": [],\n\t\"organization_id\": \"{{organization_ID}}\"\n}"
                },
                "url": "http://{{url}}/api/users",
                "description": "attempts to add a user with invalid characters"
              },
              "response": []
            },
            {
              "_postman_id": "c43d51f8-18f3-4e47-a449-ab3ba4ab6f36",
              "name": "Add user invalid - too many characters",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa57b693-c5c3-4943-a5c9-e1cb0856321a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C73588 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results) === null;",
                      "});",
                      "",
                      "pm.test(\"C73588 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var user_Name = pm.environment.get(\"user_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([\"user username exceeded maximum length of 80.\"]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C73588 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C73588 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"username\": \"toomanycharstoomanycharstoomanycharstoomanycharstoomanycharstoomanycharstoomanycharstoomanycharstoomanycharstoomanycharstoomanycharstoomanycharstoomanycharstoomanycharstoomanycharstoomanychars\",\n\t\"role_id\": \"{{user_operator_id}}\",\n\t\"name\": {\n\t\t\"first\": \"Nancy\",\n\t\t\"last\": \"Williams\"\n\t},\n\t\"email\": \"nwilliams{{$timestamp}}@test.com\",\n\t\"phones\": [],\n\t\"credentials\": [],\n\t\"level_id\": \"{{user_Level_ID}}\",\n\t\"regions\": [\n\t],\n\t\"jobTitle\": \"Camera Tech\",\n\t\"department\": \"VDOT\",\n\t\"jobFunction\": \"123\",\n\t\"password\": \"{{password}}\",\n\t\"devgroups\": [],\n\t\"organization_id\": \"{{organization_ID}}\"\n}"
                },
                "url": "http://{{url}}/api/users",
                "description": "attempts to add a user with too many chars."
              },
              "response": []
            },
            {
              "_postman_id": "2d60c19b-a108-45c9-98bd-9937358ffa82",
              "name": "Add user invalid - not enough chars",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "24c82444-17d9-42b0-b6b4-5cf7359c9612",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C73589 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results) === null;",
                      "});",
                      "",
                      "pm.test(\"C73589 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var user_Name = pm.environment.get(\"user_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([\"user username did not meet minimum length of 3.\"]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C73589 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C73589 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"username\": \"12\",\n\t\"role_id\": \"{{user_operator_id}}\",\n\t\"name\": {\n\t\t\"first\": \"Nancy\",\n\t\t\"last\": \"Williams\"\n\t},\n\t\"email\": \"nwilliams{{$timestamp}}@test.com\",\n\t\"phones\": [],\n\t\"credentials\": [],\n\t\"level_id\": \"{{user_Level_ID}}\",\n\t\"regions\": [\n\t],\n\t\"jobTitle\": \"Camera Tech\",\n\t\"department\": \"VDOT\",\n\t\"jobFunction\": \"123\",\n\t\"password\": \"{{password}}\",\n\t\"devgroups\": [],\n\t\"organization_id\": \"{{organization_ID}}\"\n}"
                },
                "url": "http://{{url}}/api/users",
                "description": "attempts to add a user with not enough characters"
              },
              "response": []
            },
            {
              "_postman_id": "6830f2f8-c73f-47b1-961d-a541c5919f04",
              "name": "Add user invalid - no name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "abea4219-2f6b-4b60-af66-3818738e3b6d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44690 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results) === null;",
                      "});",
                      "",
                      "pm.test(\"C44690 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var user_Name = pm.environment.get(\"user_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([\"No value for first received. first is a required field for user\"]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44690 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C44690 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"username\": \"test name {{$timestamp}}\",\n\t\"role_id\": \"{{user_operator_id}}\",\n\t\"name\": {\n\t\t\"first\": \"\",\n\t\t\"last\": \"\"\n\t},\n\t\"email\": \"nwilliams{{$timestamp}}@test.com\",\n\t\"phones\": [],\n\t\"credentials\": [],\n\t\"level_id\": \"{{user_Level_ID}}\",\n\t\"regions\": [\n\t],\n\t\"jobTitle\": \"Camera Tech\",\n\t\"department\": \"VDOT\",\n\t\"jobFunction\": \"123\",\n\t\"password\": \"{{password}}\",\n\t\"devgroups\": [],\n\t\"organization_id\": \"{{organization_ID}}\"\n}"
                },
                "url": "http://{{url}}/api/users",
                "description": "attempts to add a user with no name."
              },
              "response": []
            },
            {
              "_postman_id": "cd27c759-c4d9-45af-91c3-696fa682fd9a",
              "name": "Create a user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "721a2728-9f32-43c3-8696-a4c603e87f08",
                    "exec": [
                      "pm.test(\"C44692 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "    pm.environment.unset(\"user_ID\");",
                      "    pm.environment.unset(\"user_Name\");",
                      "    pm.environment.set(\"user_ID\",jsonData.results._id);",
                      "    pm.environment.set(\"user_Name\",jsonData.results.username);",
                      "});",
                      "",
                      "pm.test(\"C44692 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var user_Name = pm.environment.get(\"user_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.username).to.eql(user_Name);",
                      "    pm.expect(jsonData.warnings).to.eql([]);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44692 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44692 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44692 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"username\": \"test name {{$timestamp}}\",\n\t\"role_id\": \"{{user_operator_id}}\",\n\t\"name\": {\n\t\t\"first\": \"Nancy\",\n\t\t\"last\": \"Williams\"\n\t},\n\t\"email\": \"nwilliams{{$timestamp}}@test.com\",\n\t\"phones\": [],\n\t\"credentials\": [],\n\t\"level_id\": \"{{user_Level_ID}}\",\n\t\"regions\": [\n\t],\n\t\"jobTitle\": \"Camera Tech\",\n\t\"department\": \"VDOT\",\n\t\"jobFunction\": \"123\",\n\t\"password\": \"{{password}}\",\n\t\"devgroups\": [],\n\t\"organization_id\": \"{{organization_ID}}\"\n}"
                },
                "url": "http://{{url}}/api/users",
                "description": "creates a new user for VDOT - Central richmond organization. the info for the user is saved as environment variables and used by the other apis\n\ntriggered by:\n-filling out new user form and clicking save\n\ntests:\n1) 200 code\n2) response < 200ms\n3) user is created and variables are saved."
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "8a00a4d5-0170-49b5-bea4-33e7598da308",
          "name": "Create device group",
          "description": "",
          "item": [
            {
              "_postman_id": "9025095b-9280-4d43-87fa-1a603b5fa38d",
              "name": "Create device group",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396719bb-456f-4041-9ca8-421c6bb6f35f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44725 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "    pm.environment.unset(\"device_Group_ID\");",
                      "    pm.environment.unset(\"device_Group_Name\");",
                      "    pm.environment.set(\"device_Group_ID\",jsonData.results._id);",
                      "    pm.environment.set(\"device_Group_Name\",jsonData.results.name);",
                      "});",
                      "",
                      "pm.test(\"C44725 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var device_Group_Name = pm.environment.get(\"device_Group_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(device_Group_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44725 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44725 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44725 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"DG {{$timestamp}}\",\n\t\"level_id\": \"{{marker_dg_level_ID}}\",\n\t\"eventDetails\": \"This is a race of boats.\",\n\t\"eventName\": \"Boat Race\",\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"startDateTime\": 1528206060000,\n\t\"endDateTime\": 1528299660000\n}"
                },
                "url": "http://{{url}}/api/deviceGroups"
              },
              "response": []
            },
            {
              "_postman_id": "2ae7c72f-9aa1-4498-a54d-30ed40d7d43b",
              "name": "Create device group - Empty",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23e89ff8-2156-476b-ad4d-4383ed661539",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44721 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var device_Group_Name = pm.environment.get(\"device_Group_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"No value for name received. name is a required field for deviceGroup\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44721 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44721 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"\",\n\t\"level_id\": \"{{marker_dg_level_ID}}\",\n\t\"eventDetails\": \"This is a race of boats.\",\n\t\"eventName\": \"Boat Race\",\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"startDateTime\": 1528206060000,\n\t\"endDateTime\": 1528299660000\n}"
                },
                "url": "http://{{url}}/api/deviceGroups"
              },
              "response": []
            },
            {
              "_postman_id": "5704c13a-c0b5-410a-a9ea-2bb19c69d61e",
              "name": "Create device group - Under 3 Chars",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4e947a37-646e-4452-a58d-3e06bec9f597",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44722 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var device_Group_Name = pm.environment.get(\"device_Group_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"deviceGroup name did not meet minimum length of 3.\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44722 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44722 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"Yo\",\n\t\"level_id\": \"{{marker_dg_level_ID}}\",\n\t\"eventDetails\": \"This is a race of boats.\",\n\t\"eventName\": \"Boat Race\",\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"startDateTime\": 1528206060000,\n\t\"endDateTime\": 1528299660000\n}"
                },
                "url": "http://{{url}}/api/deviceGroups"
              },
              "response": []
            },
            {
              "_postman_id": "0d22498d-66f3-4714-b89e-26f1a9b03367",
              "name": "Create device group - Over 80 Chars",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "144e9e1c-9610-47dc-a5a8-7332f13e3393",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44723 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var device_Group_Name = pm.environment.get(\"device_Group_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"deviceGroup name exceeded maximum length of 80.\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44723 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44723 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"RicqrKSGINUtMkeSaRmWvgsSnERehvPCRIYIsctHgIguXClPnWIlqJtibdGmDvZAlpfRXQlGQvWgKcAmY\",\n\t\"level_id\": \"{{marker_dg_level_ID}}\",\n\t\"eventDetails\": \"This is a race of boats.\",\n\t\"eventName\": \"Boat Race\",\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"startDateTime\": 1528206060000,\n\t\"endDateTime\": 1528299660000\n}"
                },
                "url": "http://{{url}}/api/deviceGroups"
              },
              "response": []
            },
            {
              "_postman_id": "90779707-98fe-4636-b540-bcfe6f942997",
              "name": "Create device group - Invalid Chars",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "155e5eb5-b95a-4974-b2a8-dee9db604ceb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44724 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var device_Group_Name = pm.environment.get(\"device_Group_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"deviceGroup name Must only contain alphanumeric characters and/or /.,!@#%&()_'\\\";:?+= -\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44724 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44724 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"{{ special_characters }}\",\n\t\"level_id\": \"{{marker_dg_level_ID}}\",\n\t\"eventDetails\": \"This is a race of boats.\",\n\t\"eventName\": \"Boat Race\",\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"startDateTime\": 1528206060000,\n\t\"endDateTime\": 1528299660000\n}"
                },
                "url": "http://{{url}}/api/deviceGroups"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "46863d50-22bb-42cf-a220-ac0fc8cd042a",
          "name": "Create buildings",
          "description": "",
          "item": [
            {
              "_postman_id": "8478a665-b0ec-45e9-ae37-403c1a3e6435",
              "name": "Create building",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d8c1b267-2747-4477-82bf-4727d362aa0e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44786 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "    pm.environment.unset(\"building_ID\");",
                      "    pm.environment.unset(\"building_Name\");",
                      "    pm.environment.set(\"building_ID\",jsonData.results._id);",
                      "    pm.environment.set(\"building_Name\",jsonData.results.name);",
                      "});",
                      "",
                      "pm.test(\"C44786 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var building_Name = pm.environment.get(\"building_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(building_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44786 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44786 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44786 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"Building {{$timestamp}}\",\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"region_id\": \"{{region_ID}}\",\n\t\"loc\": {\n\t\t\"type\": \"Point\",\n\t\t\"coordinates\": [\n\t\t\t\"-77.436048\",\n\t\t\t\"37.540725\"\n\t\t]\n\t}\n}"
                },
                "url": "http://{{url}}/api/buildings",
                "description": "adds a building named: Building {{$timestamp}}"
              },
              "response": []
            },
            {
              "_postman_id": "3ce194ea-2a58-492c-8468-da7510d7cf70",
              "name": "Create building - Empty",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db043838-ddae-43f6-9a67-da8aa29b5ba6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44784 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var building_Name = pm.environment.get(\"building_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    // pm.expect(jsonData.results.name).to.eql(building_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"No value for name received. name is a required field for building\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44784 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "// pm.test(\"C44784 Verify that created and modified fields are included in the response\", function () {",
                      "//     var jsonData = pm.response.json();",
                      "//     pm.expect(jsonData.results).to.have.property('created');",
                      "//     pm.expect(jsonData.results).to.have.property('modified');",
                      "// });",
                      "",
                      "pm.test(\"C44784 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"\",\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"region_id\": \"{{region_ID}}\",\n\t\"loc\": {\n\t\t\"type\": \"Point\",\n\t\t\"coordinates\": [\n\t\t\t\"-77.436048\",\n\t\t\t\"37.540725\"\n\t\t]\n\t}\n}"
                },
                "url": "http://{{url}}/api/buildings",
                "description": "Create a building with empty fields"
              },
              "response": []
            },
            {
              "_postman_id": "00ac7a79-c464-4de0-b55e-166ebda50227",
              "name": "Create building - Under 3 chars",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dd05e45b-46d6-4848-8403-daadbde56e8b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44785 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var building_Name = pm.environment.get(\"building_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    // pm.expect(jsonData.results.name).to.eql(building_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"building name did not meet minimum length of 3.\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44785 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "// pm.test(\"C44785 Verify that created and modified fields are included in the response\", function () {",
                      "//     var jsonData = pm.response.json();",
                      "//     pm.expect(jsonData.results).to.have.property('created');",
                      "//     pm.expect(jsonData.results).to.have.property('modified');",
                      "// });",
                      "",
                      "pm.test(\"C44785 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"Bo\",\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"region_id\": \"{{region_ID}}\",\n\t\"loc\": {\n\t\t\"type\": \"Point\",\n\t\t\"coordinates\": [\n\t\t\t\"-77.436048\",\n\t\t\t\"37.540725\"\n\t\t]\n\t}\n}"
                },
                "url": "http://{{url}}/api/buildings",
                "description": "adds a building named: Building {{$timestamp}}"
              },
              "response": []
            },
            {
              "_postman_id": "0bcd700b-a3d9-4f4a-a9f2-3bdf4e48632f",
              "name": "Create building - Over 80 chars",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8896e551-a466-47ec-a655-e723e80e0135",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44791 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var building_Name = pm.environment.get(\"building_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    // pm.expect(jsonData.results.name).to.eql(building_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"building name exceeded maximum length of 80.\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44791 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "// pm.test(\"C44791 Verify that created and modified fields are included in the response\", function () {",
                      "//     var jsonData = pm.response.json();",
                      "//     pm.expect(jsonData.results).to.have.property('created');",
                      "//     pm.expect(jsonData.results).to.have.property('modified');",
                      "// });",
                      "",
                      "pm.test(\"C44791 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"hqiuxGAgwFZHIPPWfFBhAtgkFEmXPijwgbhiEoWkEdtwiEHNdiLuQdrsRPnQrCmOVqNrrjjQbXXPXOEtToVckPNKzOwftgvzVEpq\",\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"region_id\": \"{{region_ID}}\",\n\t\"loc\": {\n\t\t\"type\": \"Point\",\n\t\t\"coordinates\": [\n\t\t\t\"-77.436048\",\n\t\t\t\"37.540725\"\n\t\t]\n\t}\n}"
                },
                "url": "http://{{url}}/api/buildings",
                "description": "adds a building named: Building {{$timestamp}}"
              },
              "response": []
            },
            {
              "_postman_id": "bec803b1-451e-4a55-acb7-f7e14c9e897e",
              "name": "Create building - Invalid chars",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c843921-2f20-4d57-865d-628610a9b951",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44792 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var building_Name = pm.environment.get(\"building_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    // pm.expect(jsonData.results.name).to.eql(building_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"building name Must only contain alphanumeric characters and/or /.,!@#%&()_'\\\";:?+= -\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44792 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "// pm.test(\"C44792 Verify that created and modified fields are included in the response\", function () {",
                      "//     var jsonData = pm.response.json();",
                      "//     pm.expect(jsonData.results).to.have.property('created');",
                      "//     pm.expect(jsonData.results).to.have.property('modified');",
                      "// });",
                      "",
                      "pm.test(\"C44792 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"{{ special_characters }}\",\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"region_id\": \"{{region_ID}}\",\n\t\"loc\": {\n\t\t\"type\": \"Point\",\n\t\t\"coordinates\": [\n\t\t\t\"-77.436048\",\n\t\t\t\"37.540725\"\n\t\t]\n\t}\n}"
                },
                "url": "http://{{url}}/api/buildings",
                "description": "adds a building named: Building {{$timestamp}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "5e503a46-f124-4d62-823f-91b4a92c339d",
          "name": "Create floor",
          "description": "",
          "item": [
            {
              "_postman_id": "81b70e3f-1984-493e-9d96-e43330bd1b3e",
              "name": "Create floor",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45f7083c-b9c3-4e0d-a533-e2d108000d65",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44799 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "    pm.environment.unset(\"floor_ID\");",
                      "    pm.environment.unset(\"floor_Name\");",
                      "    pm.environment.set(\"floor_ID\",jsonData.results._id);",
                      "    pm.environment.set(\"floor_Name\",jsonData.results.name);",
                      "});",
                      "",
                      "pm.test(\"C44799 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var floor_Name = pm.environment.get(\"floor_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(floor_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44799 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44799 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44799 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "floorplan",
                      "value": null,
                      "description": "",
                      "type": "file"
                    },
                    {
                      "key": "organization_id",
                      "value": "{{organization_ID}}",
                      "description": "",
                      "type": "text"
                    },
                    {
                      "key": "building_id",
                      "value": "{{building_ID}}",
                      "description": "",
                      "type": "text"
                    },
                    {
                      "key": "name",
                      "value": "Floor {{$randomInt}}",
                      "description": "",
                      "type": "text"
                    }
                  ]
                },
                "url": "http://{{url}}/api/floors"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "6bdd4809-b890-4e99-b2fb-71b43591cfad",
          "name": "Create links",
          "description": "",
          "item": [
            {
              "_postman_id": "0b9c46d8-bd3f-4c17-a1bf-c4f0bed9ad93",
              "name": "Create a link",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a5d0f3e5-b6ea-4f2d-9d00-166574a6ea6b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset(\"link_num\");",
                      "",
                      "var link_num = Math.floor((Math.random() * 1000000) + 1);",
                      "",
                      "pm.environment.set(\"link_num\", link_num);"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "28b8a66f-4113-40f9-b0e9-e70c17a11afd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C73590 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "    pm.environment.unset(\"link_ID\");",
                      "    pm.environment.unset(\"link_Name\");",
                      "    pm.environment.set(\"link_ID\",jsonData.results._id);",
                      "    pm.environment.set(\"link_Name\",jsonData.results.name);",
                      "});",
                      "",
                      "pm.test(\"C73590 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var link_Name = pm.environment.get(\"link_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(link_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C73590 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C73590 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C73590 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"National Geographic {{link_num}}\",\n\t\"URL\": \"https://www.nationalgeographic.com/\"\n}"
                },
                "url": "http://{{url}}/api/customLinks",
                "description": "creates a new link"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "26efe01b-b52f-4a51-903d-9d43ffc9f466",
          "name": "Create shortcuts",
          "description": "",
          "item": [
            {
              "_postman_id": "e5fab380-dba1-4225-8a5e-3c80e1e31656",
              "name": "Create global shortcut",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0bfa1d5c-8dc9-4edd-8a7b-1f668039a595",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset(\"shortcut_Name\");",
                      "",
                      "var shortcut_num = Math.floor((Math.random() * 1000000) + 1);",
                      "",
                      "pm.environment.set(\"shortcut_Name\", \"Global Shortcut \" + shortcut_num.toString());"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7be1bc3b-a31e-4954-aa33-cd72fca0e53d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C49064 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "    pm.environment.unset(\"shortcut_ID\");",
                      "    pm.environment.set(\"shortcut_ID\",jsonData.results._id);",
                      "});",
                      "",
                      "pm.test(\"C49064 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var shortcut_Name = pm.environment.get(\"shortcut_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(shortcut_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C49064 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C49064 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C49064 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"bounds\": {\n\t\t\"_southWest\": {\n\t\t\t\"lng\": -79.57832120886036,\n\t\t\t\"lat\": 37.515418103591585\n\t\t},\n\t\t\"_northEast\": {\n\t\t\t\"lng\": -71.15400493672081,\n\t\t\t\"lat\": 40.62940609460314\n\t\t}\n\t},\n\t\"name\": \"{{shortcut_Name}}\"\n}"
                },
                "url": "http://{{url}}/api/shortcuts",
                "description": "creates a global shortcut"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "095e856f-94d4-46eb-85a5-80b6b884e30c",
          "name": "Create global device group",
          "description": "",
          "item": [
            {
              "_postman_id": "8d8f0fc9-bd00-42eb-b9c1-f08298bf4d14",
              "name": "Form validation - empty gdg",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "00d06378-054b-4b1d-bbd2-e8a9f81ae87a",
                    "type": "text/javascript",
                    "exec": [
                      "var d = new Date();",
                      "var start_time = d.getTime();",
                      "console.log(start_time);",
                      "",
                      "var end_time = start_time + 10000000;",
                      "console.log(end_time);",
                      "",
                      "pm.environment.set(\"start_time\", start_time);",
                      "pm.environment.set(\"end_time\", end_time);"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "425c91b1-57a0-4ffe-9a63-9b877a09d02b",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "pm.test(\"C44280 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var gdg_Name = pm.environment.get(\"gdg_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"No value for name received. name is a required field for deviceGroup\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44280 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C44280 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"\",\n\t\"level_id\": \"{{marker_dg_level_ID}}\",\n\t\"eventDetails\": \"This is a Event created through the API\",\n\t\"eventName\": \"Event 1\",\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"startDateTime\": {{start_time}},\n\t\"endDateTime\": {{end_time}}\n}"
                },
                "url": "http://{{url}}/api/deviceGroups",
                "description": "tries to add an empty global device group"
              },
              "response": []
            },
            {
              "_postman_id": "a3df551f-1ca9-42cf-a66a-3f7d1c4ab1f3",
              "name": "Form validation - under 3 characers",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "00d06378-054b-4b1d-bbd2-e8a9f81ae87a",
                    "type": "text/javascript",
                    "exec": [
                      "var d = new Date();",
                      "var start_time = d.getTime();",
                      "console.log(start_time);",
                      "",
                      "var end_time = start_time + 10000000;",
                      "console.log(end_time);",
                      "",
                      "pm.environment.set(\"start_time\", start_time);",
                      "pm.environment.set(\"end_time\", end_time);"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "aff2eb13-f147-444a-ac7a-1c80a8903952",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "pm.test(\"C44281 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var gdg_Name = pm.environment.get(\"gdg_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"deviceGroup name did not meet minimum length of 3.\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44281 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C44281 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"ab\",\n\t\"level_id\": \"{{marker_dg_level_ID}}\",\n\t\"eventDetails\": \"This is a Event created through the API\",\n\t\"eventName\": \"Event 1\",\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"startDateTime\": {{start_time}},\n\t\"endDateTime\": {{end_time}}\n}"
                },
                "url": "http://{{url}}/api/deviceGroups",
                "description": "tries to add a global device group under 3 chars"
              },
              "response": []
            },
            {
              "_postman_id": "4d67d5f9-fba5-4616-a0e4-61463db0477f",
              "name": "Form validation - over 80 chars",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "00d06378-054b-4b1d-bbd2-e8a9f81ae87a",
                    "type": "text/javascript",
                    "exec": [
                      "var d = new Date();",
                      "var start_time = d.getTime();",
                      "console.log(start_time);",
                      "",
                      "var end_time = start_time + 10000000;",
                      "console.log(end_time);",
                      "",
                      "pm.environment.set(\"start_time\", start_time);",
                      "pm.environment.set(\"end_time\", end_time);"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c590b6c5-bc78-44ee-b284-da2f77049054",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "pm.test(\"C44282 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var gdg_Name = pm.environment.get(\"gdg_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"deviceGroup name exceeded maximum length of 80.\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44282 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C44282 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest\",\n\t\"level_id\": \"{{marker_dg_level_ID}}\",\n\t\"eventDetails\": \"This is a Event created through the API\",\n\t\"eventName\": \"Event 1\",\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"startDateTime\": {{start_time}},\n\t\"endDateTime\": {{end_time}}\n}"
                },
                "url": "http://{{url}}/api/deviceGroups",
                "description": "tries to add a global device group over 80 chars"
              },
              "response": []
            },
            {
              "_postman_id": "c6726343-4af1-4ee6-ac5b-bdc1e8f3b901",
              "name": "Form validation - invalid characters",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "00d06378-054b-4b1d-bbd2-e8a9f81ae87a",
                    "type": "text/javascript",
                    "exec": [
                      "var d = new Date();",
                      "var start_time = d.getTime();",
                      "console.log(start_time);",
                      "",
                      "var end_time = start_time + 10000000;",
                      "console.log(end_time);",
                      "",
                      "pm.environment.set(\"start_time\", start_time);",
                      "pm.environment.set(\"end_time\", end_time);"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "190b279f-b1e2-4603-b951-ecd28e359ebe",
                    "type": "text/javascript",
                    "exec": [
                      "",
                      "pm.test(\"C44283 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var gdg_Name = pm.environment.get(\"gdg_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"deviceGroup name Must only contain alphanumeric characters and/or /.,!@#%&()_'\\\";:?+= -\",",
                      "        \"deviceGroup name must not contain HTML Tags.\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44283 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C44283 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"{{special_characters}}\",\n\t\"level_id\": \"{{marker_dg_level_ID}}\",\n\t\"eventDetails\": \"This is a Event created through the API\",\n\t\"eventName\": \"Event 1\",\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"startDateTime\": {{start_time}},\n\t\"endDateTime\": {{end_time}}\n}"
                },
                "url": "http://{{url}}/api/deviceGroups",
                "description": "tries to add a global device group using invalid characters"
              },
              "response": []
            },
            {
              "_postman_id": "a187046a-3d54-48a6-a4db-df570cd9e8ba",
              "name": "Create global device group",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "00d06378-054b-4b1d-bbd2-e8a9f81ae87a",
                    "type": "text/javascript",
                    "exec": [
                      "var d = new Date();",
                      "var start_time = d.getTime();",
                      "console.log(start_time);",
                      "",
                      "var end_time = start_time + 10000000;",
                      "console.log(end_time);",
                      "",
                      "pm.environment.set(\"start_time\", start_time);",
                      "pm.environment.set(\"end_time\", end_time);"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5a0673b0-bd9c-4b42-8bd3-b52ae08fce51",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44284 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "    pm.environment.unset(\"gdg_ID\");",
                      "    pm.environment.unset(\"gdg_Name\");",
                      "    pm.environment.set(\"gdg_ID\",jsonData.results._id);",
                      "    pm.environment.set(\"gdg_Name\",jsonData.results.name);",
                      "});",
                      "",
                      "pm.test(\"C44284  Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var gdg_Name = pm.environment.get(\"gdg_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(gdg_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44284 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44284 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44284 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"GDG {{$randomInt}}\",\n\t\"level_id\": \"{{marker_dg_level_ID}}\",\n\t\"eventDetails\": \"This is a Event created through the API\",\n\t\"eventName\": \"Event 1\",\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"startDateTime\": {{start_time}},\n\t\"endDateTime\": {{end_time}}\n}"
                },
                "url": "http://{{url}}/api/deviceGroups"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "b3ac24c1-c9a8-422c-8c6d-78b48f352a2f",
          "name": "Create credentials",
          "description": "",
          "item": [
            {
              "_postman_id": "3f2b408a-aa48-4300-9ef4-17dd5c4cb46e",
              "name": "Create credential",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "53a72af1-8209-4c15-996f-d4bfb9271c02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset(\"credential_Name\");",
                      "",
                      "var credential_num = Math.floor((Math.random() * 1000000) + 1);",
                      "",
                      "pm.environment.set(\"credential_Name\", \"Credential \" + credential_num.toString());"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "adae5124-1eb3-451b-a395-7bd4934f3e85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44379 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "    pm.environment.unset(\"credential_ID\");",
                      "    pm.environment.set(\"credential_ID\",jsonData.results._id);",
                      "});",
                      "",
                      "pm.test(\"C44379 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var credential_Name = pm.environment.get(\"credential_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(credential_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44379 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44379 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44379 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"{{credential_Name}}\",\n\t\"description\": \"Test credentials created thru the API\"\n}"
                },
                "url": "http://{{url}}/api/credentials"
              },
              "response": []
            },
            {
              "_postman_id": "1f86f5b2-ff54-48e0-9c47-9383fbbbc5bb",
              "name": "Create credential - empty",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "53a72af1-8209-4c15-996f-d4bfb9271c02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset(\"credential_Name\");",
                      "",
                      "var credential_num = Math.floor((Math.random() * 1000000) + 1);",
                      "",
                      "pm.environment.set(\"credential_Name\", \"Credential \" + credential_num.toString());"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "9c2ee456-f388-49e9-8a3b-62854e363247",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44375 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"No value for name received. name is a required field for credential\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44375 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C44375 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"\",\n\t\"description\": \"Test credentials created thru the API\"\n}"
                },
                "url": "http://{{url}}/api/credentials",
                "description": "tries to create a credential using empty fields."
              },
              "response": []
            },
            {
              "_postman_id": "5b1cbba9-aa8f-4919-b0e8-1bf575262ac3",
              "name": "Create credential - under 3 chars",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "53a72af1-8209-4c15-996f-d4bfb9271c02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset(\"credential_Name\");",
                      "",
                      "var credential_num = Math.floor((Math.random() * 1000000) + 1);",
                      "",
                      "pm.environment.set(\"credential_Name\", \"Credential \" + credential_num.toString());"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dad73945-fe4e-4f5a-a10c-08be1fa01697",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44376 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"credential name did not meet minimum length of 3.\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44376 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C44376 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"po\",\n\t\"description\": \"Test credentials created thru the API\"\n}"
                },
                "url": "http://{{url}}/api/credentials",
                "description": "tries to create a credential using under 3 chars"
              },
              "response": []
            },
            {
              "_postman_id": "15372955-efe3-48f9-92a1-2bc1c9c60dd1",
              "name": "Create credential - over 80 chars",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "53a72af1-8209-4c15-996f-d4bfb9271c02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset(\"credential_Name\");",
                      "",
                      "var credential_num = Math.floor((Math.random() * 1000000) + 1);",
                      "",
                      "pm.environment.set(\"credential_Name\", \"Credential \" + credential_num.toString());"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2804981b-e90a-4d9b-aee3-b0c8d802b291",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44377 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"credential name exceeded maximum length of 80.\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44377 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C44377 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"1234567890123456789012345678901234567890123456789012345678901234567890{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}\",\n\t\"description\": \"Test credentials created thru the API\"\n}"
                },
                "url": "http://{{url}}/api/credentials",
                "description": "tries to create a credential using over 80 chars"
              },
              "response": []
            },
            {
              "_postman_id": "0e9a4b7d-c106-4004-ae17-1bbee85f2469",
              "name": "Create credential - invalid characters",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "53a72af1-8209-4c15-996f-d4bfb9271c02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.unset(\"credential_Name\");",
                      "",
                      "var credential_num = Math.floor((Math.random() * 1000000) + 1);",
                      "",
                      "pm.environment.set(\"credential_Name\", \"Credential \" + credential_num.toString());"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "61f35117-f6a5-4e7c-be6f-64b138589eb6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44378 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"credential name Must only contain alphanumeric characters and/or /.,!@#%&()_'\\\";:?+= -\",",
                      "        \"credential name must not contain HTML Tags.\"",
                      "",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44378 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C44378 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"{{special_characters}}\",\n\t\"description\": \"Test credentials created thru the API\"\n}"
                },
                "url": "http://{{url}}/api/credentials",
                "description": "tries to create a credential using over 80 chars"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "332c47fc-013e-4b81-a4ca-bc7d508cc422",
          "name": "Create global alert",
          "description": "",
          "item": [
            {
              "_postman_id": "75f97d9b-45cb-4c4d-93ff-e816af81d7c0",
              "name": "Create global alert",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "89cb94d1-50d3-435b-80eb-972be7d8b14d",
                    "type": "text/javascript",
                    "exec": [
                      "var d = new Date();",
                      "var start_time = d.getTime();",
                      "console.log(start_time);",
                      "",
                      "var end_time = start_time + 10000000;",
                      "console.log(end_time);",
                      "",
                      "pm.environment.set(\"start_time\", start_time);",
                      "pm.environment.set(\"end_time\", end_time);"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a6d89058-2f76-41dd-87c2-48a42e2dc90d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44585 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "    pm.environment.unset(\"global_alert_ID\");",
                      "    pm.environment.unset(\"global_alert_Name\");",
                      "    pm.environment.set(\"global_alert_ID\",jsonData.results._id);",
                      "    pm.environment.set(\"global_alert_Name\",jsonData.results.title);",
                      "});",
                      "",
                      "pm.test(\"C44585 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var global_alert_Name = pm.environment.get(\"global_alert_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.title).to.eql(global_alert_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44585 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44585 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44585 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"title\": \"Global Alert {{$randomInt}}\",\n\t\"message_body\": \"This is a system wide global alert created thru the API\",\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"systemWide\": {\n\t\t\"authenticated\": true,\n\t\t\"unauthenticated\": false\n\t},\n\t\"start_time\": {{start_time}},\n\t\"end_time\": {{end_time}},\n\t\"target_organizations\": [\n\t\t\"{{organization_ID}}\"\n\t],\n\t\"allOrgs\": false\n}"
                },
                "url": "http://{{url}}/api/alerts"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "_postman_id": "a4033d1f-6c78-45c7-a25c-7311559232fc",
      "name": "Import tests for SM",
      "description": "",
      "item": [
        {
          "_postman_id": "df5c68d4-19de-4e4c-b5b6-22e7324de588",
          "name": "Import marker",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1826a0cd-679b-499a-adb2-5e5ac1532d78",
                "exec": [
                  "pm.test(\"C44573 The id is not null\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results._id) !== null;",
                  "});",
                  "",
                  "pm.test(\"C44573 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var global_alert_Name = pm.environment.get(\"global_alert_Name\");",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.savedCount).to.eql(1);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44573 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "pm.test(\"C44573 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\r\n  {\r\n    \"Title\": \"Marker {{$randomInt}} {{$randomInt}}\",\r\n    \"Latitude\": \"45\",\r\n    \"Longitude\": \"45\",\r\n    \"Server\": \"7.7.7.7\",\r\n    \"Stream\": \"98765\",\r\n    \"PreRollPort\": \"150\",\r\n    \"Mobile\": \"1112223333\",\r\n    \"Organization\": \"Skyline\",\r\n    \"Region\": \"{{region_ID}}\",\r\n    \"Level\": \"{{marker_dg_level_ID}}\"\r\n  }\r\n]"
            },
            "url": "http://{{url}}/api/import/markers/json",
            "description": "imports a marker which was submitted in json format."
          },
          "response": []
        },
        {
          "_postman_id": "a8a674fe-7cd2-47ae-ac55-31eb3b399466",
          "name": "Import user",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2c881db6-0e86-4c0c-af44-ef24140786fc",
                "exec": [
                  "pm.test(\"C44572 The id is not null\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results._id) !== null;",
                  "});",
                  "",
                  "pm.test(\"C44572 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var global_alert_Name = pm.environment.get(\"global_alert_Name\");",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.savedCount).to.eql(1);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44572 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "pm.test(\"C44572 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\r\n  {\r\n    \"Username\": \"User {{$randomInt}} {{$randomInt}}\",\r\n    \"First Name\": \"tim \",\r\n    \"Last Name\": \"timmy\",\r\n    \"Email\": \"ttimmy{{$randomInt}}@test.com\",\r\n    \"Phone\": \"No\",\r\n    \"Organization\": \"A Test\",\r\n    \"Role\": \"globalAdmin\",\r\n    \"Level\": \"{{user_Level_ID}}\"\r\n  }\r\n]"
            },
            "url": "http://{{url}}/api/import/users/json",
            "description": "imports a single user through the import json option"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "82b9418a-fb70-4a3b-a604-f8700e5cb5e9",
      "name": "Read Objects",
      "description": null,
      "item": [
        {
          "_postman_id": "d09b6177-bdf6-4433-8fec-15aca11df05b",
          "name": "Get single object tests",
          "description": "These tests get single objects using the API",
          "item": [
            {
              "_postman_id": "208abc4c-4d53-4d6e-ae96-27f02e2e2eb6",
              "name": "Retrieve organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dccea3bc-0917-4843-b8ef-519960dcfcc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C45052 C44270 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var organization_Name = pm.environment.get(\"organization_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(organization_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C45052 C44270 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C45052 C44270 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C45052 C44270 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});",
                      "",
                      "pm.test(\"C45052 C44270 Response time is less than 200ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(200);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/organizations/{{organization_ID}}",
                "description": "retrieves details about the vdot central region organization\n\ntriggered by:\nclicking on VDOT central region organization\n\ntests:\n1) 200 code\n2) response time < 200 ms\n3) looks for organization information"
              },
              "response": []
            },
            {
              "_postman_id": "9df82396-ff52-427c-96ef-52c88b340e4b",
              "name": "Get Region",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9d9a580c-737a-4cff-9489-3e5958c960ec",
                    "type": "text/javascript",
                    "exec": [
                      "//Looks for the basic objects associated with a Claris response, and verifies their values",
                      "pm.test(\"C54364 C44348 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var region_Name = pm.environment.get(\"region_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(region_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C54364 C44348 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    console.log(jsonData.results);",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "//Response should always include these fields",
                      "pm.test(\"C54364 C44348 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "//Gets the code from the response and compares it to the HTTP response code",
                      "pm.test(\"C54364 C44348 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/regions/{{region_ID}}",
                "description": "gets the region that was just created."
              },
              "response": []
            },
            {
              "_postman_id": "d9442dc4-e77e-4293-93ee-a123900b6b3c",
              "name": "Get marker device group level info",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c97e3a1f-2cfd-4c4c-ac1a-6dfb086d45a2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C54419 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "});",
                      "",
                      "pm.test(\"C54419 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var marker_dg_level_Name = pm.environment.get(\"marker_dg_level_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(marker_dg_level_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C54419 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C54419 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C54419 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/markerLevels/{{marker_dg_level_ID}}"
              },
              "response": []
            },
            {
              "_postman_id": "d6449736-3b17-40fd-ac5c-4a46ae9984b6",
              "name": "Retrieve Marker info",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5270a70a-e13b-4832-96ad-9db9a531daaf",
                    "type": "text/javascript",
                    "exec": [
                      "//Looks for the basic objects associated with a Claris response, and verifies their values",
                      "pm.test(\"C44854 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var marker_Name = pm.environment.get(\"marker_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.title).to.eql(marker_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44854 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    console.log(jsonData.results);",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "//Response should always include these fields",
                      "pm.test(\"C44854 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "//Gets the code from the response and compares it to the HTTP response code",
                      "pm.test(\"C44854 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/markers/{{marker_ID}}",
                "description": "retrieves information about the marker stored in the environment."
              },
              "response": []
            },
            {
              "_postman_id": "335cce7f-ca4c-4ca8-927c-cd3a92bc6da2",
              "name": "Retrieve alert info",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5937b23-8b34-4992-b6ff-34f52403ab2a",
                    "type": "text/javascript",
                    "exec": [
                      "//Looks for the basic objects associated with a Claris response, and verifies their values",
                      "pm.test(\"Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var alert_Name = pm.environment.get(\"alert_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.title).to.eql(alert_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    console.log(jsonData.results);",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "//Response should always include these fields",
                      "pm.test(\"Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "//Gets the code from the response and compares it to the HTTP response code",
                      "pm.test(\"Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/alerts/{{alert_ID}}",
                "description": "retrieves information about the alert stored in the environment."
              },
              "response": []
            },
            {
              "_postman_id": "b271aa83-48cf-44da-9767-cef0f9ca8482",
              "name": "Get User Level Info",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "265fe629-e009-401e-9389-e425243ba219",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C54408 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "});",
                      "",
                      "pm.test(\"C54408 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var user_Level_Name = pm.environment.get(\"user_Level_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(user_Level_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C54408 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C54408 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C54408 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/userLevels/{{user_Level_ID}}"
              },
              "response": []
            },
            {
              "_postman_id": "9014b571-c16f-414c-b3ee-03aa6ff76a16",
              "name": "Read user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "12ab3e51-aac8-43ae-aeb1-9dcd15c81769",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44699 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var user_Name = pm.environment.get(\"user_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.username).to.eql(user_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44699 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44699 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44699 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/users/{{user_ID}}",
                "description": "provides information on a specific user within vdot central richmond.\n\ntriggered by:\nclicking on an existing user\n\ntests:\n1) success 200 code\n2) 200 ms repsonse\n3) looks for proper user name"
              },
              "response": []
            },
            {
              "_postman_id": "f9943278-78c3-4064-adee-c4ac8041f197",
              "name": "View device group",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "093a6512-43e7-40aa-bc42-de35d085fed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44730 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var device_Group_Name = pm.environment.get(\"device_Group_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(device_Group_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44730 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44730 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44730 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/deviceGroups/{{device_Group_ID}}",
                "description": "Retrieves information on the new device group."
              },
              "response": []
            },
            {
              "_postman_id": "21a8f885-41f4-414b-8a18-6816e6222a75",
              "name": "Get building",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "98447c1e-ee96-4eef-ba61-bfac19ccda1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44787 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var building_Name = pm.environment.get(\"building_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(building_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44787 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44787 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44787 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/buildings/{{building_ID}}",
                "description": "retrieves information for a building"
              },
              "response": []
            },
            {
              "_postman_id": "0acdd7a4-6533-4629-8003-d052c0146882",
              "name": "Get floor",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5165ccc9-cac1-427b-bf90-8f00f8152c16",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44813 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var floor_Name = pm.environment.get(\"floor_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(floor_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44813 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44813 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44813 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {},
                "url": "http://{{url}}/api/floors/{{floor_ID}}",
                "description": "Retrieves information on a floor"
              },
              "response": []
            },
            {
              "_postman_id": "ba1fe26b-8938-4bb1-9335-acdcb6c0f043",
              "name": "Retrieve link info",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "06cdb982-35fc-4261-b6ef-9f9047bff4bc",
                    "type": "text/javascript",
                    "exec": [
                      "//Looks for the basic objects associated with a Claris response, and verifies their values",
                      "pm.test(\"C44603 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var link_Name = pm.environment.get(\"link_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(link_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44603 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    console.log(jsonData.results);",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "//Response should always include these fields",
                      "pm.test(\"C44603 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "//Gets the code from the response and compares it to the HTTP response code",
                      "pm.test(\"C44603 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/customLinks/{{link_ID}}",
                "description": "Gets info for link that was just created."
              },
              "response": []
            },
            {
              "_postman_id": "12b6a408-2fe9-4384-86d6-57794e6ba967",
              "name": "Get global shortcut info",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c507d020-fafa-4faf-bfb8-060d8e6a963e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44183 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var shortcut_Name = pm.environment.get(\"shortcut_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(shortcut_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44183 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44183 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44183 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/shortcuts/{{shortcut_ID}}",
                "description": "gets info of a global shortcut that was created."
              },
              "response": []
            },
            {
              "_postman_id": "08a93bdb-47c6-40c2-8da9-61e63b87c6dc",
              "name": "Get global device group info",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "407b7d67-ce79-40e7-8b49-bc7f99ef9e3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "});",
                      "",
                      "pm.test(\"C44290 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var gdg_Name = pm.environment.get(\"gdg_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(gdg_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44290 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44290 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44290 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/deviceGroups/{{gdg_ID}}"
              },
              "response": []
            },
            {
              "_postman_id": "da44f8eb-8195-4e68-9033-c946224c521d",
              "name": "Get credential info",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74e9ae02-833a-44ce-b5a8-f2dfef2efb47",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44384 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "});",
                      "",
                      "pm.test(\"C44384 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var credential_Name = pm.environment.get(\"credential_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(credential_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44384 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44384 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44384 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/credentials/{{credential_ID}}"
              },
              "response": []
            },
            {
              "_postman_id": "797eef43-401d-42e8-b2bf-62a17e569d61",
              "name": "Get global alert info",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f832703c-b702-4414-9c4e-de194fa97bc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C73591 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "});",
                      "",
                      "pm.test(\"C73591 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var global_alert_Name = pm.environment.get(\"global_alert_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.title).to.eql(global_alert_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C73591 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C73591 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C73591 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/alerts/{{global_alert_ID}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "a48ebe8a-a948-43c5-8617-1a2f35b0fb97",
          "name": "Get all tests",
          "description": "These tests test the get all kinds of APIs which return all entries of a certain kind of object.",
          "item": [
            {
              "_postman_id": "70f59218-a1a9-4d24-9159-d7e7eef07e36",
              "name": "Get list of all organizations",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bd5aeaf2-87f8-41d1-8252-ed98176a5031",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var organization_Name = pm.environment.get(\"organization_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "    pm.expect(pm.response.text()).to.include(organization_Name);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(Array.isArray(jsonData.results)).to.eql(true);",
                      "});",
                      "",
                      "pm.test(\"Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results[0]).to.have.property('created');",
                      "    pm.expect(jsonData.results[0]).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 200ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(200);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/organizations",
                "description": "retrieves a list of all organizations. looks for certain organizations to verify a list of items is what is returned."
              },
              "response": []
            },
            {
              "_postman_id": "bbea5550-65b0-4562-a4b5-68bd4e623ff6",
              "name": "Get list of all regions",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eb383b7e-386e-46c0-81d2-62beb6b1486b",
                    "type": "text/javascript",
                    "exec": [
                      "//Looks for the basic objects associated with a Claris response, and verifies their values",
                      "//Because the results is an array, it will be hard to access the name we are using for CRUD. so instead we have a verify the name is not null statement.",
                      "pm.test(\"Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var region_Name = pm.environment.get(\"region_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results[0].name).not.to.eql(null);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns multiple region records. So the results should be an array.",
                      "pm.test(\"Verify that the results is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(Array.isArray(jsonData.results)).to.eql(true);",
                      "});",
                      "",
                      "//Response should always include these fields",
                      "pm.test(\"Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results[0]).to.have.property('created');",
                      "    pm.expect(jsonData.results[0]).to.have.property('modified');",
                      "});",
                      "",
                      "//Gets the code from the response and compares it to the HTTP response code",
                      "pm.test(\"Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/regions",
                "description": "retrieves a whole list of regions"
              },
              "response": []
            },
            {
              "_postman_id": "cf4ba31a-d35f-45f6-ba03-3059787d8014",
              "name": "Get all marker device group level info",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ed76582-6d17-432d-a555-eee4bd4ba5d3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "});",
                      "",
                      "pm.test(\"Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var marker_dg_level_Name = pm.environment.get(\"marker_dg_level_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(pm.response.text()).to.include(marker_dg_level_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(Array.isArray(jsonData.results)).to.eql(true);",
                      "});",
                      "",
                      "pm.test(\"Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results[0]).to.have.property('created');",
                      "    pm.expect(jsonData.results[0]).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/markerLevels"
              },
              "response": []
            },
            {
              "_postman_id": "334d3407-ac06-4eea-9b23-c696a9fae15f",
              "name": "Get list of all user levels",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4982bdd1-5e86-4092-ad63-99cbdae998db",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "});",
                      "",
                      "pm.test(\"Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var user_Level_Name = pm.environment.get(\"user_Level_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "    pm.expect(pm.response.text()).to.include(user_Level_Name);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(Array.isArray(jsonData.results)).to.eql(true);",
                      "});",
                      "",
                      "pm.test(\"Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results[0]).to.have.property('created');",
                      "    pm.expect(jsonData.results[0]).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/userLevels",
                "description": "retrieves a list of all user levels"
              },
              "response": []
            },
            {
              "_postman_id": "a9a546ad-da96-4166-a09b-ed46d534dc25",
              "name": "View device groups - all",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bf8cb31c-ae34-4d17-938a-ce885782ae10",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44528 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var device_Group_Name = pm.environment.get(\"device_Group_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(pm.response.text()).to.include(device_Group_Name);",
                      "    pm.expect(pm.response.text()).to.include(\"System Organization\");",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44528 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(Array.isArray(jsonData.results)).to.eql(true);",
                      "});",
                      "",
                      "pm.test(\"C44528 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results[0]).to.have.property('created');",
                      "    pm.expect(jsonData.results[0]).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44528 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/deviceGroups",
                "description": "Retrieves a list of all device groups"
              },
              "response": []
            },
            {
              "_postman_id": "3d41a827-7fbd-454e-9355-68f676d15f98",
              "name": "Retrieve buildings - all",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "192c15ca-3a44-4234-9ca4-04d04acea859",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44483 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var building_Name = pm.environment.get(\"building_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(pm.response.text()).to.include(building_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44483 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(Array.isArray(jsonData.results)).to.eql(true);",
                      "});",
                      "",
                      "pm.test(\"C44483 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results[0]).to.have.property('created');",
                      "    pm.expect(jsonData.results[0]).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44483 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/buildings",
                "description": "Retrieves a list of all the buildings. Looks for certain buildings in the list."
              },
              "response": []
            },
            {
              "_postman_id": "aa320dd0-3dc8-49d4-9e35-2c71d5f5664f",
              "name": "Get all floors",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "999ae049-817c-49f1-9be2-64b9b01b5704",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44498 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var floor_Name = pm.environment.get(\"floor_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(floor_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44498 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44498 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44498 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {},
                "url": "http://{{url}}/api/floors"
              },
              "response": []
            },
            {
              "_postman_id": "1b4521ff-2973-44cd-9541-d960f5b51484",
              "name": "Get all links",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fa009f8-d232-47bb-bc90-82beee3b9bd7",
                    "type": "text/javascript",
                    "exec": [
                      "//Looks for the basic objects associated with a Claris response, and verifies their values",
                      "//Because the results is an array, it will be hard to access the name we are using for CRUD. so instead we have a verify the name is not null statement.",
                      "pm.test(\"C73592 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var link_Name = pm.environment.get(\"link_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results[0].name).not.to.eql(null);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns multiple region records. So the results should be an array.",
                      "pm.test(\"C73592 Verify that the results is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(Array.isArray(jsonData.results)).to.eql(true);",
                      "});",
                      "",
                      "//Response should always include these fields",
                      "pm.test(\"C73592 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results[0]).to.have.property('created');",
                      "    pm.expect(jsonData.results[0]).to.have.property('modified');",
                      "});",
                      "",
                      "//Gets the code from the response and compares it to the HTTP response code",
                      "pm.test(\"C73592 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});",
                      "",
                      "pm.test(\"C73592 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/customLinks",
                "description": "Retrieves all custom links"
              },
              "response": []
            },
            {
              "_postman_id": "34fce3bd-759d-4b7f-a12d-f07d6d9c5ed9",
              "name": "Get all shortcuts",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "86cfc407-cdbd-4fd9-b32c-60fb97c5e3ef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C73593 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var shortcut_Name = pm.environment.get(\"shortcut_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(pm.response.text()).to.include(\"Annapolis\");",
                      "    pm.expect(pm.response.text()).to.include(shortcut_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C73593 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(Array.isArray(jsonData.results)).to.eql(true);",
                      "});",
                      "",
                      "pm.test(\"C73593 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results[0]).to.have.property('created');",
                      "    pm.expect(jsonData.results[0]).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C73593 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/shortcuts",
                "description": "retrieves all shortcuts and their info"
              },
              "response": []
            },
            {
              "_postman_id": "ab286606-32de-4bfa-ac02-cc1459b1cdd1",
              "name": "Get all global device groups",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5fd0b78f-6d35-45e2-b9ab-5bbffedd1456",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C73594 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "});",
                      "",
                      "pm.test(\"C73594 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var gdg_Name = pm.environment.get(\"gdg_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(pm.response.text()).to.include(gdg_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C73594 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(Array.isArray(jsonData.results)).to.eql(true);",
                      "});",
                      "",
                      "pm.test(\"C73594 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results[0]).to.have.property('created');",
                      "    pm.expect(jsonData.results[0]).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C73594 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/deviceGroups",
                "description": "retrieves a list of all global device groups"
              },
              "response": []
            },
            {
              "_postman_id": "f5898cac-160e-41ff-9a17-9fe944478e2e",
              "name": "Get all credentials",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d9c3145-c542-4c58-9b72-6dd049414c79",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C73595 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "});",
                      "",
                      "pm.test(\"C73595 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var credential_Name = pm.environment.get(\"credential_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(pm.response.text()).to.include(credential_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C73595 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(Array.isArray(jsonData.results)).to.eql(true);",
                      "});",
                      "",
                      "pm.test(\"C73595 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results[0]).to.have.property('created');",
                      "    pm.expect(jsonData.results[0]).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C73595 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "http://{{url}}/api/credentials"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "_postman_id": "12bd9a7f-27cc-4082-859a-ba9e2c6c99e2",
      "name": "Global Reports",
      "description": "runs apis used when a user wants to view a global report.",
      "item": [
        {
          "_postman_id": "996e33fb-fbec-4f50-be5b-b3068728bfa5",
          "name": "All Marker Views Report",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "451b2426-77e6-4066-ad9b-41bd56ce6b78",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"C44513 Verify known entries are returned in the response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results._id) !== null;",
                  "    // pm.expect(pm.response.text()).to.include(\"Friday, July 6th, 2018 @ 3:09:26 PM\");",
                  "});",
                  "",
                  "pm.test(\"C44513 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44513 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(Array.isArray(jsonData.results.data)).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"C44513 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": {
              "raw": "http://{{url}}/api/auditMarkerViews?start=0&limit=10&sortBy=created.date&sortByDir=desc&search=&searchFields%5B%5D=created.user.username&searchFields%5B%5D=marker.organizationName&searchFields%5B%5D=marker.title&searchFields%5B%5D=createdDateString&datatables=true",
              "protocol": "http",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "auditMarkerViews"
              ],
              "query": [
                {
                  "key": "start",
                  "value": "0",
                  "equals": true
                },
                {
                  "key": "limit",
                  "value": "10",
                  "equals": true
                },
                {
                  "key": "sortBy",
                  "value": "created.date",
                  "equals": true
                },
                {
                  "key": "sortByDir",
                  "value": "desc",
                  "equals": true
                },
                {
                  "key": "search",
                  "value": "",
                  "equals": true
                },
                {
                  "key": "searchFields%5B%5D",
                  "value": "created.user.username",
                  "equals": true
                },
                {
                  "key": "searchFields%5B%5D",
                  "value": "marker.organizationName",
                  "equals": true
                },
                {
                  "key": "searchFields%5B%5D",
                  "value": "marker.title",
                  "equals": true
                },
                {
                  "key": "searchFields%5B%5D",
                  "value": "createdDateString",
                  "equals": true
                },
                {
                  "key": "datatables",
                  "value": "true",
                  "equals": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "_postman_id": "9b9e7313-2c2a-4265-b94d-48e53375ec6b",
          "name": "Logged in Users report",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b66065f9-6c2a-4716-9cb5-6074d8ae19b7",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"C44543 Verify known entries are returned in the response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results) !== null;",
                  "    pm.expect(pm.response.text()).to.include(\"PostmanRuntime\");",
                  "});",
                  "",
                  "pm.test(\"C44543 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44543 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(Array.isArray(jsonData.results)).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"C44543 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": {
              "raw": "http://{{url}}/api/users/sessions?populate=false",
              "protocol": "http",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "users",
                "sessions"
              ],
              "query": [
                {
                  "key": "populate",
                  "value": "false",
                  "equals": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "_postman_id": "3be79d77-f104-4483-b84a-5d9c6910b2bd",
          "name": "User Login History report",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ded493d2-cfde-4617-a60c-bf99ed21c962",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"C73587 Verify known entries are returned in the response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var global_username = pm.environment.get(\"global_username\");",
                  "    pm.expect(jsonData.results) !== null;",
                  "    // pm.expect(pm.response.text()).to.include(global_username);",
                  "});",
                  "",
                  "pm.test(\"C73587 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C73587 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(Array.isArray(jsonData.results)).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"C73587 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": {
              "raw": "http://{{url}}/api/auditUserLogins?populate=false",
              "protocol": "http",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "auditUserLogins"
              ],
              "query": [
                {
                  "key": "populate",
                  "value": "false",
                  "equals": true
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "0b2aaaf6-20d3-4468-9a0f-ba0921907562",
      "name": "Update Objects",
      "description": null,
      "item": [
        {
          "_postman_id": "9d87a082-551b-41f5-8a4f-7472640fd620",
          "name": "Patch organization",
          "description": null,
          "item": [
            {
              "_postman_id": "ab54ebe1-8fc7-418c-a37c-a8985a8af318",
              "name": "Patch organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4b87597-f295-4242-97d6-96a99b139ef0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C73596 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var organization_Name = pm.environment.get(\"organization_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(\"EDITED \" + organization_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C73596 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C73596 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C73596 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});",
                      "",
                      "pm.test(\"C73596 Response time is less than 200ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(200);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"EDITED {{organization_Name}}\",\n  \"contact\": \"{{contact}}\",\n  \"phone\": \"{{valid_phone}}\",\n  \"recordVideo\": false,\n  \"videoRetentionNotes\": \"Update Org API Test\",\n  \"primaryLocationName\": \"Perry Hall\",\n  \"primaryLocationAddress\": \"9309 Glen Vista Road\",\n  \"primaryLocationCity\": \"Perry Hall\",\n  \"primaryLocationState\": \"MD\",\n  \"primaryLocationZipcode\": \"21128\",\n  \"administratorName\": {\n    \"first\": \"\",\n    \"last\": \"\"\n  },\n  \"administratorTitle\": \"\",\n  \"administratorEmail\": \"\",\n  \"administratorPhone\": \"\",\n  \"videoAdministratorName\": {\n    \"first\": \"\",\n    \"last\": \"\"\n  },\n  \"videoAdministratorTitle\": \"\",\n  \"videoAdministratorEmail\": \"\",\n  \"videoAdministratorPhone\": \"\",\n  \"authType\": \"Local Authentication\",\n  \"ldapConfig\": null\n}"
                },
                "url": "http://{{url}}/api/organizations/{{organization_ID}}",
                "description": "update an existing organization. This test uses the same organization as the one that was previously created. it updates the primary location of the organization.\n\ntriggered by:\nediting an organization\n\ntests:\n1) status 200\n2) response < 200ms\n3) primary location address now equals 9309 glen vista road"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "07dad893-497e-46c8-a34b-68b32474b2a0",
          "name": "Patch region",
          "description": null,
          "item": [
            {
              "_postman_id": "cd96dd9e-861f-4985-8f7c-7bb5557511d3",
              "name": "Patch region",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e160f2d8-c970-4827-be0b-b2f51a80fc2c",
                    "type": "text/javascript",
                    "exec": [
                      "//Looks for the basic objects associated with a Claris response, and verifies their values",
                      "pm.test(\"C44353 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var region_Name = pm.environment.get(\"region_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(\"EDITED \" + region_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44353 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44353 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44353 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"EDITED {{region_Name}}\",\n\t\"description\": \"This region was edited by Postman.\"\n}"
                },
                "url": "http://{{url}}/api/regions/{{region_ID}}",
                "description": "Updates the current region stored in the environment."
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "18764ee1-ed4e-4efe-a81d-d0927b3c7bdb",
          "name": "Patch marker device group level",
          "description": null,
          "item": [
            {
              "_postman_id": "cb1a6e6d-38bc-49c1-aaba-cffb899401e8",
              "name": "Patch marker device group level",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e90b7a0-5b34-46b8-963a-a58484a16046",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C54420 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "});",
                      "",
                      "pm.test(\"C54420 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var marker_dg_level_Name = pm.environment.get(\"marker_dg_level_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(\"EDITED \" + marker_dg_level_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C54420 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C54420 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C54420 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"EDITED {{marker_dg_level_Name}}\",\n\t\"description\": \"this is a test marker/device group created through the api\"\n}"
                },
                "url": "http://{{url}}/api/markerLevels/{{marker_dg_level_ID}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "d783652e-fd5f-4843-b70b-6383a16301e7",
          "name": "Patch marker",
          "description": null,
          "item": [
            {
              "_postman_id": "24301eb1-a7e8-432a-8f72-27b02df2d51e",
              "name": "Patch marker title",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f8b0a37-75d3-436a-8641-954ac946d1f2",
                    "type": "text/javascript",
                    "exec": [
                      "//Looks for the basic objects associated with a Claris response, and verifies their values",
                      "pm.test(\"C73597 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var marker_Name = pm.environment.get(\"marker_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.title).to.eql(\"EDITED \" + marker_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C73597 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    console.log(jsonData.results);",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "//Response should always include these fields",
                      "pm.test(\"C73597 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "//Gets the code from the response and compares it to the HTTP response code",
                      "pm.test(\"C73597 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"server\": \"8.15.251.118\",\n\t\"stream\": \"dvg5wlp4k825rpmeef4x2058s4g0oj88\",\n\t\"dynamic\": false,\n\t\"prerollPort\": null,\n\t\"title\": \"EDITED {{marker_Name}}\",\n\t\"loc\": {\n\t\t\"type\": \"Point\",\n\t\t\"coordinates\": [\n\t\t\t\"-76.6246886\",\n\t\t\t\"39.1626084\"\n\t\t]\n\t},\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"region_id\": \"{{region_ID}}\",\n\t\"level_id\": \"{{marker_dg_level_ID}}\",\n\t\"type_id\": \"{{camera_type_id}}\",\n\t\"devgroups\": [\n\t],\n\t\"inactive\": false\n}"
                },
                "url": "http://{{url}}/api/markers/{{marker_ID}}",
                "description": "edit a marker of an organization"
              },
              "response": []
            },
            {
              "_postman_id": "d6663328-3078-43fa-a444-32e05b0ba78e",
              "name": "Patch marker - local device group",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c779ecf-766c-4fab-a151-0eaf91d4359b",
                    "type": "text/javascript",
                    "exec": [
                      "//Looks for the basic objects associated with a Claris response, and verifies their values",
                      "pm.test(\"C44860 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var marker_Name = pm.environment.get(\"marker_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.title).to.eql(\"EDITED \" + marker_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44860 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    console.log(jsonData.results);",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "//Response should always include these fields",
                      "pm.test(\"C44860 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "//Gets the code from the response and compares it to the HTTP response code",
                      "pm.test(\"C44860 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"server\": \"8.15.251.118\",\n\t\"stream\": \"dvg5wlp4k825rpmeef4x2058s4g0oj88\",\n\t\"dynamic\": false,\n\t\"prerollPort\": null,\n\t\"title\": \"EDITED {{marker_Name}}\",\n\t\"loc\": {\n\t\t\"type\": \"Point\",\n\t\t\"coordinates\": [\n\t\t\t\"-76.6246886\",\n\t\t\t\"39.1626084\"\n\t\t]\n\t},\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"region_id\": \"{{region_ID}}\",\n\t\"level_id\": \"{{marker_dg_level_ID}}\",\n\t\"type_id\": \"{{camera_type_id}}\",\n\t\"devgroups\": [\n\t],\n\t\"inactive\": false\n}"
                },
                "url": "http://{{url}}/api/markers/{{marker_ID}}",
                "description": "edit a marker of an organization"
              },
              "response": []
            },
            {
              "_postman_id": "ec127ec2-1d52-4fa7-8545-615295a86202",
              "name": "Patch marker - global device group",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "998fb250-0b93-41f7-a03e-38200760b6d4",
                    "type": "text/javascript",
                    "exec": [
                      "//Looks for the basic objects associated with a Claris response, and verifies their values",
                      "pm.test(\"C44861 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var marker_Name = pm.environment.get(\"marker_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.title).to.eql(\"EDITED \" + marker_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44861Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    console.log(jsonData.results);",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "//Response should always include these fields",
                      "pm.test(\"C44861 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "//Gets the code from the response and compares it to the HTTP response code",
                      "pm.test(\"C44861 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"server\": \"8.15.251.118\",\n\t\"stream\": \"dvg5wlp4k825rpmeef4x2058s4g0oj88\",\n\t\"dynamic\": false,\n\t\"prerollPort\": null,\n\t\"title\": \"EDITED {{marker_Name}}\",\n\t\"loc\": {\n\t\t\"type\": \"Point\",\n\t\t\"coordinates\": [\n\t\t\t\"-76.6246886\",\n\t\t\t\"39.1626084\"\n\t\t]\n\t},\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"region_id\": \"{{region_ID}}\",\n\t\"level_id\": \"{{marker_dg_level_ID}}\",\n\t\"type_id\": \"{{camera_type_id}}\",\n\t\"devgroups\": [\n\t],\n\t\"inactive\": false\n}"
                },
                "url": "http://{{url}}/api/markers/{{marker_ID}}",
                "description": "edit a marker of an organization"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "4f43616a-b2ed-4ca4-b126-7be011171d7d",
          "name": "Patch alert",
          "description": null,
          "item": [
            {
              "_postman_id": "27b0a480-f411-4e5f-9820-b44366837ec4",
              "name": "Patch alert",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c2b8e37-4c32-4837-865c-b8e6f1911e7b",
                    "type": "text/javascript",
                    "exec": [
                      "//Looks for the basic objects associated with a Claris response, and verifies their values",
                      "pm.test(\"C73598 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var alert_Name = pm.environment.get(\"alert_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.title).to.eql(\"EDITED \" + alert_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C73598 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    console.log(jsonData.results);",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "//Response should always include these fields",
                      "pm.test(\"C73598 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "//Gets the code from the response and compares it to the HTTP response code",
                      "pm.test(\"C73598 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"title\": \"EDITED {{alert_Name}}\",\n\t\"message_body\": \"This is a test alert through postman.\",\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"systemWide\": {\n\t\t\"authenticated\": false,\n\t\t\"unauthenticated\": false\n\t},\n\t\"start_time\": {{start_time}},\n\t\"end_time\": {{end_time}},\n\t\"target_organizations\": [],\n\t\"allOrgs\": false\n}"
                },
                "url": "http://{{url}}/api/alerts/{{alert_ID}}",
                "description": "edit a alert of an organization"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "7157a5c4-16d8-4c73-a20d-721fbf680428",
          "name": "Patch user level",
          "description": null,
          "item": [
            {
              "_postman_id": "193d06a2-48c8-4f77-9d17-2d308aa368af",
              "name": "Patch User level",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13aa2ef9-e9fb-4c7c-b4c4-f89ed4ceb63c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C54403 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "});",
                      "",
                      "pm.test(\"C54403 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var user_Level_Name = pm.environment.get(\"user_Level_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(\"EDITED \" + user_Level_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C54403 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C54403 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C54403 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"EDITED {{user_Level_Name}}\",\n\t\"description\": \"User level created through API tests.\"\n}"
                },
                "url": "http://{{url}}/api/userLevels/{{user_Level_ID}}"
              },
              "response": []
            },
            {
              "_postman_id": "b73085f2-4dcc-40aa-b579-d4e3fcf904b1",
              "name": "Patch User level - edit with improper data types",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ba0a487a-7630-4ecc-a28e-167ad50539c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C76308 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var user_Level_Name = pm.environment.get(\"user_Level_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"userLevel name did not meet minimum length of 3.\",",
                      "        \"userLevel name Must only contain alphanumeric characters and/or /.,!@#%&()_'\\\";:?+= -\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C76308 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C76308 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": 2343.234342,\n\t\"description\": 54654645.654645\n}"
                },
                "url": "http://{{url}}/api/userLevels/{{user_Level_ID}}",
                "description": "using wrong datatypes in form fields and trying to submit\n\nedit: seems like we accept booleans, ints, and strings but arrays cause a 500 error so they dont seem to be handled properly."
              },
              "response": []
            },
            {
              "_postman_id": "55b569b9-c392-443f-aa04-a1a16ebed106",
              "name": "Patch User level - edit with empty values",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7347fc5-70ad-4b62-8170-97ae0305a50a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C76309 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"No value for name received. name is a required field for userLevel\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C76309 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C76309 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"\",\n\t\"description\": \"\"\n}"
                },
                "url": "http://{{url}}/api/userLevels/{{user_Level_ID}}",
                "description": "using empty fields in form fields and trying to submit\n\n"
              },
              "response": []
            },
            {
              "_postman_id": "1dfffc4f-439f-47d5-8397-dec05d7b0c73",
              "name": "Patch User level - sql injection",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7347fc5-70ad-4b62-8170-97ae0305a50a",
                    "exec": [
                      "pm.test(\"C76309 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C76309 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C76309 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"test'\",\n\t\"description\": \"test\"\n}"
                },
                "url": "http://{{url}}/api/userLevels/{{user_Level_ID}}",
                "description": "using empty fields in form fields and trying to submit\n\nattempts a sql injection"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "90c47dc2-9939-499b-8975-c3066041e741",
          "name": "Patch user",
          "description": null,
          "item": [
            {
              "_postman_id": "718f9469-07c2-4179-b3d6-b5bd151613b2",
              "name": "Patch User",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "00e4d23c-c9b8-4fbe-b910-373f409fcb8a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44703 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var user_Name = pm.environment.get(\"user_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.username).to.eql(\"EDITED \" + user_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44703 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44703 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44703 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"username\": \"EDITED {{user_Name}}\",\n\t\"role_id\": \"{{operator_role_id}}\",\n\t\"name\": {\n\t\t\"first\": \"Nancy\",\n\t\t\"last\": \"Williams\"\n\t},\n\t\"email\": \"nwilliams{{$timestamp}}@test.com\",\n\t\"phones\": [],\n\t\"credentials\": [],\n\t\"level_id\": \"{{user_Level_ID}}\",\n\t\"regions\": [\n\t],\n\t\"jobTitle\": \"Camera Techie\",\n\t\"department\": \"VDOT\",\n\t\"jobFunction\": \"123\",\n\t\"password\": \"{{password}}\",\n\t\"devgroups\": [],\n\t\"organization_id\": \"{{organization_ID}}\"\n}"
                },
                "url": "http://{{url}}/api/users/{{user_ID}}",
                "description": "updates a user\n\ntriggered by:\nediting a user and saving\n\ntests:\n1) 200 code\n2) 200 ms response\n3) checks for changes that were patched to the user\n"
              },
              "response": []
            },
            {
              "_postman_id": "22847627-f77f-4b4c-aa22-b6b226789195",
              "name": "Patch User - empty fields",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e821278-21b3-4751-83b4-7e2a602efb98",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44693 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results) === null;",
                      "});",
                      "",
                      "pm.test(\"C44693 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var user_Name = pm.environment.get(\"user_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([\"No value for first received. first is a required field for user\"]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44693 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C44693 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"username\": \"EDITED {{user_Name}}\",\n\t\"role_id\": \"{{operator_role_id}}\",\n\t\"name\": {\n\t\t\"first\": \"\",\n\t\t\"last\": \"\"\n\t},\n\t\"email\": \"nwilliams{{$timestamp}}@test.com\",\n\t\"phones\": [],\n\t\"credentials\": [],\n\t\"level_id\": \"{{user_Level_ID}}\",\n\t\"regions\": [\n\t],\n\t\"jobTitle\": \"Camera Techie\",\n\t\"department\": \"VDOT\",\n\t\"jobFunction\": \"123\",\n\t\"password\": \"{{password}}\",\n\t\"devgroups\": [],\n\t\"organization_id\": \"{{organization_ID}}\"\n}"
                },
                "url": "http://{{url}}/api/users/{{user_ID}}",
                "description": "tries to patch an existing user with no key field data."
              },
              "response": []
            },
            {
              "_postman_id": "f0efb687-ffe0-4caa-a197-0a2377943d0e",
              "name": "Patch User - invalid fields",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "64d43613-06d1-4d67-8adf-85553a1fc4e9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44694 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results) === null;",
                      "});",
                      "",
                      "pm.test(\"C44694 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var user_Name = pm.environment.get(\"user_Name\");",
                      "    pm.expect(jsonData.code).to.eql(500);",
                      "    pm.expect(jsonData.success).to.eql(false);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql([",
                      "        \"user username Must only contain alphanumeric characters and/or /.,!@#%&()_'\\\";:?+= -\",",
                      "        \"user username must not contain HTML Tags.\",",
                      "        \"user email \\\"~!@#$%^&*()-=_+[]{}\\\\|';:\\\"/.,<>?`.com\\\" is not an email address.\",",
                      "        \"user email must not contain HTML Tags.\",",
                      "        \"user first Must only contain alphanumeric characters and/or /.,!@#%&()_'\\\";:?+= -\",",
                      "        \"user first must not contain HTML Tags.\"",
                      "    ]);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44694 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C44694 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"username\": \"{{special_characters}}\",\n\t\"role_id\": \"{{operator_role_id}}\",\n\t\"name\": {\n\t\t\"first\": \"{{special_characters}}\",\n\t\t\"last\": \"{{special_characters}}\"\n\t},\n\t\"email\": \"{{special_characters}}.com\",\n\t\"phones\": [\"{{special_characters}}\"],\n\t\"credentials\": [],\n\t\"level_id\": \"{{user_Level_ID}}\",\n\t\"regions\": [\n\t],\n\t\"jobTitle\": \"Camera Techie\",\n\t\"department\": \"VDOT\",\n\t\"jobFunction\": \"123\",\n\t\"password\": \"{{password}}\",\n\t\"devgroups\": [],\n\t\"organization_id\": \"{{organization_ID}}\"\n}"
                },
                "url": "http://{{url}}/api/users/{{user_ID}}",
                "description": "tries to patch an existing user with no key field data."
              },
              "response": []
            },
            {
              "_postman_id": "96874db9-e34d-4491-9780-0e8074a3866e",
              "name": "Patch User - valid",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "034f8b3a-4b2f-464a-b224-5039e00ad023",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44703 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results) === null;",
                      "});",
                      "",
                      "pm.test(\"C44703 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var user_Name = pm.environment.get(\"user_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44703 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C44703 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"username\": \"EDITED {{user_Name}}\",\n\t\"role_id\": \"{{operator_role_id}}\",\n\t\"name\": {\n\t\t\"first\": \"Vlade\",\n\t\t\"last\": \"Divac\"\n\t},\n\t\"email\": \"vdivac{{$timestamp}}@test.com\",\n\t\"phones\": [3012564585],\n\t\"credentials\": [],\n\t\"level_id\": \"{{user_Level_ID}}\",\n\t\"regions\": [\n\t],\n\t\"jobTitle\": \"Camera Techie\",\n\t\"department\": \"VDOT\",\n\t\"jobFunction\": \"123\",\n\t\"password\": \"YoMTVRaps89!\",\n\t\"devgroups\": [],\n\t\"organization_id\": \"{{organization_ID}}\"\n}"
                },
                "url": "http://{{url}}/api/users/{{user_ID}}",
                "description": "tries to patch an existing user with no key field data."
              },
              "response": []
            },
            {
              "_postman_id": "dec9f976-99b5-4d8a-ba61-de91f2c85d39",
              "name": "Patch User - Change organization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc3046a8-420b-4fb7-8d9d-7ed006005fe4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44715 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var user_Name = pm.environment.get(\"user_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44715 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44715 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"username\": \"EDITED {{user_Name}}\",\n\t\"role_id\": \"{{operator_role_id}}\",\n\t\"name\": {\n\t\t\"first\": \"Nancy\",\n\t\t\"last\": \"Williams\"\n\t},\n\t\"email\": \"nwilliams{{$timestamp}}@test.com\",\n\t\"phones\": [],\n\t\"credentials\": [],\n\t\"level_id\": \"{{user_Level_ID}}\",\n\t\"regions\": [\n\t],\n\t\"jobTitle\": \"Camera Techie\",\n\t\"department\": \"VDOT\",\n\t\"jobFunction\": \"123\",\n\t\"password\": \"{{password}}\",\n\t\"devgroups\": [],\n\t\"organization_id\": \"{{organization_ID_2}}\"\n}"
                },
                "url": "http://{{url}}/api/users/{{user_ID}}",
                "description": "updates a user\n\ntriggered by:\nediting a user and saving\n\ntests:\n1) 200 code\n2) 200 ms response\n3) checks for changes that were patched to the user\n"
              },
              "response": []
            },
            {
              "_postman_id": "395bdd4a-9280-4b67-96d1-a7e4f00ee9f8",
              "name": "Patch User - Deactivate User - Missing Reason",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f1a6819c-e4c7-4bbe-b313-c19cf69224fa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C45151 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results) === null;",
                      "});",
                      "",
                      "// Purpose: Verify that inactive can not be set to TRUE without a reason given.",
                      "pm.test(\"C45151 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var inactive_True = pm.environment.get(\"inactive_True\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C45151 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C45151 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"username\": \"EDITED {{user_Name}}\",\n\t\"role_id\": \"{{operator_role_id}}\",\n\t\"name\": {\n\t\t\"first\": \"Vlade\",\n\t\t\"last\": \"Divac\"\n\t},\n\t\"email\": \"vdivac{{$timestamp}}@test.com\",\n\t\"phones\": [3012564585],\n\t\"credentials\": [],\n\t\"level_id\": \"{{user_Level_ID}}\",\n\t\"regions\": [\n\t],\n\t\"jobTitle\": \"Camera Techie\",\n\t\"department\": \"VDOT\",\n\t\"jobFunction\": \"123\",\n\t\"password\": \"YoMTVRaps89!\",\n\t\"devgroups\": [],\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"inactive\": \"{{inactive_True}}\"\n}"
                },
                "url": "http://{{url}}/api/users/{{user_ID}}",
                "description": "tries to patch an existing user with no key field data."
              },
              "response": []
            },
            {
              "_postman_id": "31926091-471b-4690-aea0-785f111038da",
              "name": "Patch User - Deactivate/Activate User - Success",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "39b18462-2f79-4210-a2eb-53b73529d951",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C45152 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results) === null;",
                      "});",
                      "",
                      "// Purpose: Verify you can deactivate/activate a user successfully",
                      "pm.test(\"C45152 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var inactive_True = pm.environment.get(\"inactive\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C45152 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C44703 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});",
                      ""
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e0786ea9-3bd3-4154-bd97-ad9f9d0b7421",
                    "type": "text/javascript",
                    "exec": [
                      "// This is to toggle the inactive/active button of the user.",
                      "// It is not required that a reason is given when setting the user to inactive.",
                      "(pm.environment.get(\"inactive\") == \"true\") ",
                      " ? pm.environment.set(\"inactive\", \"false\")",
                      " : pm.environment.set(\"inactive\", \"true\");"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"username\": \"EDITED {{user_Name}}\",\n\t\"role_id\": \"{{operator_role_id}}\",\n\t\"name\": {\n\t\t\"first\": \"Vlade\",\n\t\t\"last\": \"Divac\"\n\t},\n\t\"email\": \"vdivac{{$timestamp}}@test.com\",\n\t\"phones\": [3012564585],\n\t\"credentials\": [],\n\t\"level_id\": \"{{user_Level_ID}}\",\n\t\"regions\": [\n\t],\n\t\"jobTitle\": \"Camera Techie\",\n\t\"department\": \"VDOT\",\n\t\"jobFunction\": \"123\",\n\t\"password\": \"YoMTVRaps89!\",\n\t\"devgroups\": [],\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"inactive\": \"{{inactive}}\"\n}"
                },
                "url": "http://{{url}}/api/users/{{user_ID}}",
                "description": "tries to patch an existing user with no key field data."
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "cbf4774a-7258-448a-a171-7a3901dffdb9",
          "name": "Patch device group",
          "description": "",
          "item": [
            {
              "_postman_id": "027202e0-fb29-43f7-a00a-7453d7299617",
              "name": "Patch Device Group - Event Details",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "38e47be3-3f87-4de6-bba1-b89f36f67e94",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44725 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var device_Group_Name = pm.environment.get(\"device_Group_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(device_Group_Name);",
                      "    pm.expect(jsonData.results.eventName).to.eql(\"Boat Race EDITED\")",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44725 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44725 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44725 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"inactive\": false,\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"lastDeactivated\": null,\n\t\"reasonDeactivated\": \"\",\n\t\"name\": \"{{device_Group_Name}}\",\n\t\"level_id\": \"{{marker_dg_level_ID}}\",\n\t\"eventName\": \"Boat Race EDITED\",\n\t\"eventDetails\": \"This is a race of boats. EDITED\",\n\t\"startDateTime\": 1528206060000,\n\t\"endDateTime\": 1528299660000\n}"
                },
                "url": "http://{{url}}/api/deviceGroups/{{device_Group_ID}}",
                "description": "patches an existing device group"
              },
              "response": []
            },
            {
              "_postman_id": "67c597e5-a629-4e54-88ec-fd724f4ec8f6",
              "name": "Device Group - Add markers",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad931833-7ce8-4890-bee1-ad2c47060abc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44741 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44741 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C44741 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});",
                      "",
                      "pm.test(\"C44741 Body contains markers\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results.success).to.not.eql(null);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"markerIds\": [\n    \"{{marker_ID}}\"\n  ]\n}"
                },
                "url": "http://{{url}}/api/markers/deviceGroups/{{device_Group_ID}}",
                "description": "patches an existing device group by adding markers to it (separate API from editing other things on the event details page)"
              },
              "response": []
            },
            {
              "_postman_id": "281d1ced-df77-4651-94d5-021e6bf0f9eb",
              "name": "Device Group - Add users",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c7178ed2-8068-407e-ac28-e845d27406aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44752 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44752 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"C44752 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});",
                      "",
                      "pm.test(\"C44752 Body contains user names\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results.success).to.not.eql(null);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userIds\": [\n    \"{{user_ID}}\"\n  ]\n}"
                },
                "url": "http://{{url}}/api/users/deviceGroups/{{device_Group_ID}}",
                "description": "patches an existing device group by adding users to it (separate API from editing other things on the event details page)"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "651da814-5d34-466a-9e5d-fcd1cce3be02",
          "name": "Patch building",
          "description": "",
          "item": [
            {
              "_postman_id": "852c26ba-b9aa-4e57-b8ee-1dcc32209851",
              "name": "Patch building",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "257ff1a0-2cae-430f-aa8b-32d7fe1e9187",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44793 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var building_Name = pm.environment.get(\"building_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(\"EDITED \" + building_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44793 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44793 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44793 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"EDITED {{building_Name}}\",\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"region_id\": \"{{region_ID}}\",\n\t\"loc\": {\n\t\t\"type\": \"Point\",\n\t\t\"coordinates\": [\n\t\t\t\"-77.436048\",\n\t\t\t\"37.540725\"\n\t\t]\n\t}\n}"
                },
                "url": {
                  "raw": "http://{{url}}/api/buildings/{{building_ID}}?populate=false",
                  "protocol": "http",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "buildings",
                    "{{building_ID}}"
                  ],
                  "query": [
                    {
                      "key": "populate",
                      "value": "false",
                      "equals": true
                    }
                  ]
                },
                "description": "updates a building's name"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "510711ca-3cdb-43b5-b1cd-c7059dafbae4",
          "name": "Patch floor",
          "description": "",
          "item": [
            {
              "_postman_id": "fcec8a75-b0ca-4c97-a239-db950e2d08dd",
              "name": "Patch floor",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6841cb3e-51e9-41d6-b0ae-436b5738a389",
                    "type": "text/javascript",
                    "exec": [
                      "//Looks for the basic objects associated with a Claris response, and verifies their values",
                      "pm.test(\"C44810 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var floor_Name = pm.environment.get(\"floor_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(\"EDITED \" + floor_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44810 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    console.log(jsonData.results);",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "//Response should always include these fields",
                      "pm.test(\"C44810 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "//Gets the code from the response and compares it to the HTTP response code",
                      "pm.test(\"C44810 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"name\":\"EDITED {{floor_Name}}\",\r\n\t\"image\":\"xLUWvnYNf9zFOQI5QEU2VxRc8RWZJulbU6omjf5OSDkWHYW28o1534343461583.PNG\"\r\n}\r\n"
                },
                "url": {
                  "raw": "http://{{url}}/api/floors/{{floor_ID}}?populate=false",
                  "protocol": "http",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "floors",
                    "{{floor_ID}}"
                  ],
                  "query": [
                    {
                      "key": "populate",
                      "value": "false",
                      "equals": true
                    }
                  ]
                },
                "description": "tests which try to validly or invalidly update a floor"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "bf62f4c9-bc7f-4c20-94ce-791da3205641",
          "name": "Patch link",
          "description": "Edits the link currently stored as an environment variable.",
          "item": [
            {
              "_postman_id": "fea662f8-714e-4687-a975-2bf631707561",
              "name": "Patch link",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c6c3c207-21eb-4941-85f7-2ac8334446c9",
                    "type": "text/javascript",
                    "exec": [
                      "//Looks for the basic objects associated with a Claris response, and verifies their values",
                      "pm.test(\"C44623 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var link_Name = pm.environment.get(\"link_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(\"EDITED \" + link_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44623 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    console.log(jsonData.results);",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "//Response should always include these fields",
                      "pm.test(\"C44623 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "//Gets the code from the response and compares it to the HTTP response code",
                      "pm.test(\"C44623 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"EDITED National Geographic {{link_num}}\",\n\t\"URL\": \"https://www.nationalgeographic.com/\"\n}"
                },
                "url": "http://{{url}}/api/customLinks/{{link_ID}}",
                "description": "edits the link stored in the environment."
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "241d62f8-53e4-4ecf-91b2-bf640bff0d66",
          "name": "Patch shortcut",
          "description": "",
          "item": [
            {
              "_postman_id": "16e993d8-3772-43ec-b295-1d887ac7fb88",
              "name": "Patch shortcut",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8bd59481-2327-46f5-9ab2-874dca0be4e4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C73599 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var shortcut_Name = pm.environment.get(\"shortcut_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(\"EDITED \" + shortcut_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C73599 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C73599 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C73599 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"bounds\": {\n\t\t\"_southWest\": {\n\t\t\t\"lng\": -79.57832120886036,\n\t\t\t\"lat\": 37.515418103591585\n\t\t},\n\t\t\"_northEast\": {\n\t\t\t\"lng\": -71.15400493672081,\n\t\t\t\"lat\": 40.62940609460314\n\t\t}\n\t},\n\t\"name\": \"EDITED {{shortcut_Name}}\"\n}"
                },
                "url": "http://{{url}}/api/shortcuts/{{shortcut_ID}}",
                "description": "edit a shortcut"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "6d21bcad-715f-44de-bde6-a94654677934",
          "name": "Patch global device group",
          "description": "",
          "item": [
            {
              "_postman_id": "efb3f27e-85b9-4b6e-8586-99ec7ca3b7a4",
              "name": "Patch global device group",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "86f634a2-2d01-4cc4-8f99-41d11fe8f799",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "});",
                      "",
                      "pm.test(\"C44285 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var gdg_Name = pm.environment.get(\"gdg_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(\"EDITED \" + gdg_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44285 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44285 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44285 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"inactive\": false,\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"lastDeactivated\": null,\n\t\"reasonDeactivated\": \"\",\n\t\"name\": \"EDITED {{gdg_Name}}\",\n\t\"level_id\": \"{{marker_dg_level_ID}}\",\n\t\"eventName\": \"Event 1\",\n\t\"eventDetails\": \"This is a Event created through the API\",\n\t\"startDateTime\": 1530904800000,\n\t\"endDateTime\": 1530914760000\n}"
                },
                "url": "http://{{url}}/api/deviceGroups/{{gdg_ID}}",
                "description": "edits a global device group"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "3684946d-f311-4fe4-b796-a4a35f0d8187",
          "name": "Patch credentials",
          "description": "",
          "item": [
            {
              "_postman_id": "85e56296-e357-415c-8921-4e121682998e",
              "name": "Update credential",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2fdf8a77-f324-4497-9c8e-4e082e3b12c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C44380 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "});",
                      "",
                      "pm.test(\"C44380 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var credential_Name = pm.environment.get(\"credential_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.name).to.eql(\"EDITED \" + credential_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C44380 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C44380 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C44380 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"EDITED {{credential_Name}}\",\n\t\"description\": \"Test credentials created thru the API\"\n}"
                },
                "url": "http://{{url}}/api/credentials/{{credential_ID}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "f7da257d-8ea0-4b86-9492-b027c59a2ca4",
          "name": "Patch global alert",
          "description": "",
          "item": [
            {
              "_postman_id": "2dddad26-a751-4dd3-907e-50703e71a555",
              "name": "Patch global alert",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26ee312d-7312-4f19-ac49-22fc348b083a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"C73600 The id is not null\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results._id) !== null;",
                      "});",
                      "",
                      "pm.test(\"C73600 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    var global_alert_Name = pm.environment.get(\"global_alert_Name\");",
                      "    pm.expect(jsonData.code).to.eql(200);",
                      "    pm.expect(jsonData.success).to.eql(true);",
                      "    pm.expect(jsonData.results.title).to.eql(\"EDITED \" + global_alert_Name);",
                      "    pm.expect(jsonData.warnings).to.eql(null);",
                      "    pm.expect(jsonData.errors).to.eql(null);",
                      "});",
                      "",
                      "//This API returns a single record. So the results should be an object.",
                      "pm.test(\"C73600 Verify that the results is an object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                      "});",
                      "",
                      "pm.test(\"C73600 Verify that created and modified fields are included in the response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.results).to.have.property('created');",
                      "    pm.expect(jsonData.results).to.have.property('modified');",
                      "});",
                      "",
                      "pm.test(\"C73600 Verify that status code in the response matches the HTTP status code\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"title\": \"EDITED {{global_alert_Name}}\",\n\t\"message_body\": \"This is a system wide global alert created thru the API\",\n\t\"organization_id\": \"{{organization_ID}}\",\n\t\"systemWide\": {\n\t\t\"authenticated\": true,\n\t\t\"unauthenticated\": false\n\t},\n\t\"start_time\": {{start_time}},\n\t\"end_time\": {{end_time}},\n\t\"target_organizations\": [\n\t\t\"{{organization_ID}}\"\n\t],\n\t\"allOrgs\": false\n}"
                },
                "url": "http://{{url}}/api/alerts/{{global_alert_ID}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "_postman_id": "eca3761a-ad62-4662-941e-2125603891b2",
      "name": "Delete Object",
      "description": null,
      "item": [
        {
          "_postman_id": "d5366d75-d292-4673-8678-b4ff1b667712",
          "name": "Delete credential",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "28098a07-9645-443c-a18f-aed560a78479",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"C44383 The id is not null\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results._id) !== null;",
                  "});",
                  "",
                  "pm.test(\"C44383 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var credential_Name = pm.environment.get(\"credential_Name\");",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.__disabled).to.eql(true);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44383 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "pm.test(\"C44383 Verify that created and modified fields are included in the response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results).to.have.property('created');",
                  "    pm.expect(jsonData.results).to.have.property('modified');",
                  "});",
                  "",
                  "pm.test(\"C44383 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "http://{{url}}/api/credentials/{{credential_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "8c12d8c4-6f94-459e-874e-363be7deef68",
          "name": "Delete global alert",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4c3fe7a6-d8ce-46b9-bf8c-334ac4a7f657",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"C73601 The id is not null\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results._id) !== null;",
                  "});",
                  "",
                  "pm.test(\"C73601 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var global_alert_Name = pm.environment.get(\"global_alert_Name\");",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.__disabled).to.eql(true);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C73601 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "pm.test(\"C73601 Verify that created and modified fields are included in the response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results).to.have.property('created');",
                  "    pm.expect(jsonData.results).to.have.property('modified');",
                  "});",
                  "",
                  "pm.test(\"C73601 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "http://{{url}}/api/alerts/{{global_alert_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "27f6ff66-ef11-4604-9338-5828981062b7",
          "name": "Delete global shortcut",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d99110b8-cf80-4536-a71a-ac0e5e4cc2d7",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"C44184 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var shortcut_Name = pm.environment.get(\"shortcut_Name\");",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.name).to.eql(\"EDITED \" + shortcut_Name);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44184 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "pm.test(\"C44184 Verify that created and modified fields are included in the response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results).to.have.property('created');",
                  "    pm.expect(jsonData.results).to.have.property('modified');",
                  "});",
                  "",
                  "pm.test(\"C44184 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "http://{{url}}/api/shortcuts/{{shortcut_ID}}",
            "description": "deletes a global shortcut you created."
          },
          "response": []
        },
        {
          "_postman_id": "ad4a1577-616c-40c3-9fbb-a85d35b302d1",
          "name": "Delete link",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5a569dfb-d536-4078-9fc8-ca791c961d45",
                "type": "text/javascript",
                "exec": [
                  "//Looks for the basic objects associated with a Claris response, and verifies their values",
                  "pm.test(\"C44626 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var link_Name = pm.environment.get(\"link_Name\");",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.name).to.eql(\"EDITED \" + link_Name);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44626 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    console.log(jsonData.results);",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "//Response should always include these fields",
                  "pm.test(\"C44626 Verify that created and modified fields are included in the response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results).to.have.property('created');",
                  "    pm.expect(jsonData.results).to.have.property('modified');",
                  "});",
                  "",
                  "//Gets the code from the response and compares it to the HTTP response code",
                  "pm.test(\"C44626 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "http://{{url}}/api/customLinks/{{link_ID}}",
            "description": "deletes link that we created a few apis ago."
          },
          "response": []
        },
        {
          "_postman_id": "f276694b-2ea3-4ee7-a42e-e1c0eb46bf51",
          "name": "Delete global device group",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6c0041a-912f-41db-8db1-6dcfe71350b9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"The id is not null\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results._id) !== null;",
                  "});",
                  "",
                  "pm.test(\"C44289 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var gdg_Name = pm.environment.get(\"gdg_Name\");",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.__disabled).to.eql(true);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44289 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "pm.test(\"C44289 Verify that created and modified fields are included in the response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results).to.have.property('created');",
                  "    pm.expect(jsonData.results).to.have.property('modified');",
                  "});",
                  "",
                  "pm.test(\"C44289 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "http://{{url}}/api/deviceGroups/{{gdg_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "df1e9ad4-5f6c-4cb6-9086-32678acf99ea",
          "name": "Device Group - delete markers",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f9cc2abd-511b-4fdc-adee-fd4fe70db1a8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"C44304 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44304 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C44304 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});",
                  "",
                  "pm.test(\"C44304 Body contains deleted markers\", function () {",
                  "    var marker_id = pm.environment.get(\"marker_ID\");    ",
                  "    pm.expect(pm.response.text()).to.include(marker_id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"markerIds\": [\n    \"{{marker_ID}}\"\n  ]\n}"
            },
            "url": "http://{{url}}/api/markers/deviceGroups/{{device_Group_ID}}",
            "description": "deletes some of the markers previously added to the device group event."
          },
          "response": []
        },
        {
          "_postman_id": "c466c8ae-8152-4259-ad07-ebb3e37271c7",
          "name": "Device Group - delete users",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "47ed012e-6f0a-42bd-a7e5-637f80fdda0d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"C44315 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44315 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C44315 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});",
                  "",
                  "pm.test(\"C44315 Body doesnt contain current device group\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var device_Group_ID = pm.environment.get(\"device_Group_ID\");    ",
                  "    pm.expect(pm.response.text()).to.not.include(device_Group_ID);",
                  "});",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userIds\": [\n    \"{{user_ID}}\"\n  ]\n}"
            },
            "url": "http://{{url}}/api/users/deviceGroups/{{device_Group_ID}}",
            "description": "deletes some of the users added to the device group"
          },
          "response": []
        },
        {
          "_postman_id": "dfe23145-80af-490a-8f4c-8def423bdcca",
          "name": "Delete device group",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9570f308-03f1-4dbd-8ec2-df274422edad",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"C44729 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "    pm.expect(jsonData.results.__disabled).to.eql(true);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44729 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C44729 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "http://{{url}}/api/deviceGroups/{{device_Group_ID}}",
            "description": "Deletes a device group"
          },
          "response": []
        },
        {
          "_postman_id": "28b6f77e-1312-4a82-8240-ebce24202e2d",
          "name": "Delete floor",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "efaf7321-1183-4ffb-a917-4e3bfba0baf2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"C44820 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.__disabled).to.eql(true);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44820 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "pm.test(\"C44820 Verify that created and modified fields are included in the response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results).to.have.property('created');",
                  "    pm.expect(jsonData.results).to.have.property('modified');",
                  "});",
                  "",
                  "pm.test(\"C44820 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {},
            "url": "http://{{url}}/api/floors/{{floor_ID}}",
            "description": "deletes a floor object"
          },
          "response": []
        },
        {
          "_postman_id": "82c5eb4f-9b2a-441a-b7aa-cb8c63379530",
          "name": "Delete building",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "249d7071-722a-40c4-a498-f2ff0d27ba35",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"C44796 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var building_Name = pm.environment.get(\"building_Name\");",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.__disabled).to.eql(true);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44796 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "pm.test(\"C44796 Verify that created and modified fields are included in the response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results).to.have.property('created');",
                  "    pm.expect(jsonData.results).to.have.property('modified');",
                  "});",
                  "",
                  "pm.test(\"C44796 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "http://{{url}}/api/buildings/{{building_ID}}",
            "description": "Deletes a building from an organization"
          },
          "response": []
        },
        {
          "_postman_id": "054153c5-6490-406a-900e-bbb696892af7",
          "name": "Delete User",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a5e92ff4-d6fc-4874-b75e-e465f2d1ef94",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"C44704 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var user_Name = pm.environment.get(\"user_Name\");",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.__disabled).to.eql(true);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44704 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "pm.test(\"C44704 Verify that created and modified fields are included in the response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results).to.have.property('created');",
                  "    pm.expect(jsonData.results).to.have.property('modified');",
                  "});",
                  "",
                  "pm.test(\"C44704 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "http://{{url}}/api/users/{{user_ID}}",
            "description": "deletes the user made earlier in the set of crud ops for users."
          },
          "response": []
        },
        {
          "_postman_id": "918e972a-038a-4431-9971-b9ddbb3f453c",
          "name": "Delete user level",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "52ff3f2b-f613-4146-a844-53da933f4ba8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"C54407 The id is not null\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results._id) !== null;",
                  "});",
                  "",
                  "pm.test(\"C54407 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var user_Level_Name = pm.environment.get(\"user_Level_Name\");",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.name).to.eql(\"EDITED \" + user_Level_Name);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C54407 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "pm.test(\"C54407 Verify that created and modified fields are included in the response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results).to.have.property('created');",
                  "    pm.expect(jsonData.results).to.have.property('modified');",
                  "});",
                  "",
                  "pm.test(\"C54407 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"newId\":\"5b3506831993c50701e57ece\"}\r\n"
            },
            "url": "http://{{url}}/api/userLevels/{{user_Level_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "01f6d37a-777e-4d74-9041-538aa7168cef",
          "name": "Delete alert",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8ff1553c-fa84-4ea0-ac62-b50ce426de0e",
                "type": "text/javascript",
                "exec": [
                  "//Looks for the basic objects associated with a Claris response, and verifies their values",
                  "pm.test(\"C73602 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.__disabled).to.eql(true);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C73602 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    console.log(jsonData.results);",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "//Response should always include these fields",
                  "pm.test(\"C73602 Verify that created and modified fields are included in the response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results).to.have.property('created');",
                  "    pm.expect(jsonData.results).to.have.property('modified');",
                  "});",
                  "",
                  "//Gets the code from the response and compares it to the HTTP response code",
                  "pm.test(\"C73602 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "http://{{url}}/api/alerts/{{alert_ID}}",
            "description": "Deletes an alert"
          },
          "response": []
        },
        {
          "_postman_id": "1c6fb560-6d5c-4170-bd04-838b71cb701a",
          "name": "Delete marker",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f7669466-fc6d-4b18-bccb-9ff52c06df05",
                "type": "text/javascript",
                "exec": [
                  "//Looks for the basic objects associated with a Claris response, and verifies their values",
                  "pm.test(\"C44853 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var marker_Name = pm.environment.get(\"marker_Name\");",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.__disabled).to.eql(true);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44853 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    console.log(jsonData.results);",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "//Response should always include these fields",
                  "pm.test(\"C44853 Verify that created and modified fields are included in the response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results).to.have.property('created');",
                  "    pm.expect(jsonData.results).to.have.property('modified');",
                  "});",
                  "",
                  "//Gets the code from the response and compares it to the HTTP response code",
                  "pm.test(\"C44853 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "http://{{url}}/api/markers/{{marker_ID}}",
            "description": "Deletes a marker"
          },
          "response": []
        },
        {
          "_postman_id": "bdecbd3b-d079-486b-b4a0-cf8741d9e22a",
          "name": "Delete device group marker level",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "37403856-9876-4dbc-bf99-417d9e224528",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"C54424 The id is not null\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results._id) !== null;",
                  "});",
                  "",
                  "pm.test(\"C54424 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var marker_dg_level_Name = pm.environment.get(\"marker_dg_level_Name\");",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.__disabled).to.eql(true);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C54424 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "pm.test(\"C54424 Verify that created and modified fields are included in the response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results).to.have.property('created');",
                  "    pm.expect(jsonData.results).to.have.property('modified');",
                  "});",
                  "",
                  "pm.test(\"C54424 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"newId\":\"5b06ebac3f61cb2854990aaf\"}\r\n"
            },
            "url": "http://{{url}}/api/markerLevels/{{marker_dg_level_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "a7fd4b1d-fa5a-4ea6-8ca4-c1d222fb14e0",
          "name": "Delete region",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "01593af1-986a-476f-a205-95214059750f",
                "type": "text/javascript",
                "exec": [
                  "//note about delete: body has a newID field. That is the id where all of the deleted region's records are pushed to",
                  "",
                  "//Looks for the basic objects associated with a Claris response, and verifies their values",
                  "pm.test(\"C44357 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var region_Name = pm.environment.get(\"region_Name\");",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.name).to.eql(\"EDITED \" + region_Name);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44357 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "pm.test(\"C44357 Verify that created and modified fields are included in the response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results).to.have.property('created');",
                  "    pm.expect(jsonData.results).to.have.property('modified');",
                  "});",
                  "",
                  "pm.test(\"C44357 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\r\n{\"newId\": \"{{dcdot_ID}}\"}"
            },
            "url": "http://{{url}}/api/regions/{{region_ID}}",
            "description": "deletes the region stored in the environment"
          },
          "response": []
        },
        {
          "_postman_id": "934f3b0d-b6e6-454f-9bf8-47d57605825f",
          "name": "Delete organization",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c64ce6db-71bc-43fa-8b81-e630e56b8936",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"C73603 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var organization_Name = pm.environment.get(\"organization_Name\");",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.__disabled).to.eql(true);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C73603 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "pm.test(\"C73603 Verify that created and modified fields are included in the response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results).to.have.property('created');",
                  "    pm.expect(jsonData.results).to.have.property('modified');",
                  "});",
                  "",
                  "pm.test(\"C73603 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});",
                  "",
                  "pm.test(\"C73603 Response time is less than 200ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "http://{{url}}/api/organizations/{{organization_ID}}",
            "description": "deletes an organization"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "21f2e65f-9f5a-4261-b43e-0ecb91d063e5",
      "name": "App Config",
      "description": "runs app config tests",
      "item": [
        {
          "_postman_id": "0808bd22-3cdb-4959-bfcd-c22a04abdb02",
          "name": "Get app config",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "367ec4cd-528a-42af-821f-c545b43e1eca",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"C44634 The id is not null\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results._id) !== null;",
                  "});",
                  "",
                  "pm.test(\"C44634 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var appconfig_ID = pm.environment.get(\"appconfig_ID\");",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results[0]._id).to.eql(appconfig_ID);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44634 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "pm.test(\"C44634 Verify that created and modified fields are included in the response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results[0]).to.have.property('created');",
                  "    pm.expect(jsonData.results[0]).to.have.property('modified');",
                  "});",
                  "",
                  "pm.test(\"C44634 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}",
            "description": "gets the app config for the selected id"
          },
          "response": []
        },
        {
          "_postman_id": "ff9e6b09-449c-4cc2-9b7f-8c8e3c8b734d",
          "name": "Edit app config - edit app title blank",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9ff410b6-7c0d-4230-8149-9104006c535e",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"C44636 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(500);",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    pm.expect(jsonData.results).to.eql(null);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql([\"No value for title received. title is a required field for appConfig\"]);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44636 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C44636 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"\",\r\n  \"map\": \"OpenLayers\",\r\n  \"server\": \"http://144.202.244.154/v2/chart/\",\r\n  \"mail\": {\r\n    \"email\": \"claris-admin@skylinenet.net\",\r\n    \"server\": \"https://skylinedemo.com\",\r\n    \"direct\": true,\r\n    \"smtp\": {\r\n      \"use\": false\r\n    },\r\n    \"service\": {\r\n      \"type\": \"none\"\r\n    }\r\n  },\r\n  \"smIntegration\": true,\r\n  \"smUrl\": \"http://172.28.12.54:80\",\r\n  \"smKey\": \"1TAHduOH5EAFjbkZKbUgWCejPrydCoq1\",\r\n  \"defaults\": {\r\n    \"userLevel\": \"{{default_User_Level}}\",\r\n    \"markerLevel\": \"{{default_Marker_Level}}\"\r\n  },\r\n  \"modules\": {\r\n    \"Floorplans\": true,\r\n    \"LDAP\": false,\r\n    \"ResetPassword\": true,\r\n    \"CustomLinks\": true,\r\n    \"Twitter\": true,\r\n    \"LocalStorage\": false\r\n  },\r\n  \"twitter\": {\r\n    \"consumerKey\": \"9uDJNMGaQGG24hp27aD3iFcyX\",\r\n    \"consumerSecret\": \"Sn3KLh4laj2BbpJhMCZTOLNdkwxjUArKDGA1f3mbRPOsdIM5WL\",\r\n    \"accessTokenKey\": \"1000010913930530817-RU8aCFKvB8yWbwpS6R1KtdEdJML7qO\",\r\n    \"accessTokenSecret\": \"HTnewjIIR3KfEHQf4HWSSArcsCWmzrvzFt9YSpwQ3S8YO\"\r\n  },\r\n  \"inactivityLimits\": {\r\n    \"globalAdmin\": 28800000,\r\n    \"localAdmin\": 28800000,\r\n    \"operator\": 28800000\r\n  },\r\n  \"logoutOnDisconnect\": true\r\n}"
            },
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "5b667f42-2eab-4637-8606-1ab338c28b5b",
          "name": "Edit app config - edit app title invalid",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b9de0297-2c93-4b9d-b4d9-0e64eb6a0114",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"C44640 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(500);",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    pm.expect(jsonData.results).to.eql(null);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql([",
                  "        \"appConfig title Must only contain alphanumeric characters and/or /.,!@#%&()_'\\\";:?+= -\",",
                  "        \"appConfig title must not contain HTML Tags.\"",
                  "    ]);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44640 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C44640 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"<AND 1=0 UNION SELECT '1', 'a', 'Robin', 'b' FROM users>\",\r\n  \"map\": \"OpenLayers\",\r\n  \"server\": \"http://144.202.244.154/v2/chart/\",\r\n  \"mail\": {\r\n    \"email\": \"claris-admin@skylinenet.net\",\r\n    \"server\": \"https://skylinedemo.com\",\r\n    \"direct\": true,\r\n    \"smtp\": {\r\n      \"use\": false\r\n    },\r\n    \"service\": {\r\n      \"type\": \"none\"\r\n    }\r\n  },\r\n  \"smIntegration\": true,\r\n  \"smUrl\": \"http://172.28.12.54:80\",\r\n  \"smKey\": \"1TAHduOH5EAFjbkZKbUgWCejPrydCoq1\",\r\n  \"defaults\": {\r\n    \"userLevel\": \"{{default_User_Level}}\",\r\n    \"markerLevel\": \"{{default_Marker_Level}}\"\r\n  },\r\n  \"modules\": {\r\n    \"Floorplans\": true,\r\n    \"LDAP\": false,\r\n    \"ResetPassword\": true,\r\n    \"CustomLinks\": true,\r\n    \"Twitter\": true,\r\n    \"LocalStorage\": false\r\n  },\r\n  \"twitter\": {\r\n    \"consumerKey\": \"9uDJNMGaQGG24hp27aD3iFcyX\",\r\n    \"consumerSecret\": \"Sn3KLh4laj2BbpJhMCZTOLNdkwxjUArKDGA1f3mbRPOsdIM5WL\",\r\n    \"accessTokenKey\": \"1000010913930530817-RU8aCFKvB8yWbwpS6R1KtdEdJML7qO\",\r\n    \"accessTokenSecret\": \"HTnewjIIR3KfEHQf4HWSSArcsCWmzrvzFt9YSpwQ3S8YO\"\r\n  },\r\n  \"inactivityLimits\": {\r\n    \"globalAdmin\": 28800000,\r\n    \"localAdmin\": 28800000,\r\n    \"operator\": 28800000\r\n  },\r\n  \"logoutOnDisconnect\": true\r\n}"
            },
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "f65df892-4d23-4604-b227-b8bd6e64f939",
          "name": "Edit app config - edit app title under 3 chars",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0038a829-bf49-406d-97e7-226d442bd908",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"C44641 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(500);",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    pm.expect(jsonData.results).to.eql(null);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql([\"user username did not meet minimum length of 3.\"]);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44641 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C44641 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"AB\",\r\n  \"map\": \"OpenLayers\",\r\n  \"server\": \"http://144.202.244.154/v2/chart/\",\r\n  \"mail\": {\r\n    \"email\": \"claris-admin@skylinenet.net\",\r\n    \"server\": \"https://skylinedemo.com\",\r\n    \"direct\": true,\r\n    \"smtp\": {\r\n      \"use\": false\r\n    },\r\n    \"service\": {\r\n      \"type\": \"none\"\r\n    }\r\n  },\r\n  \"smIntegration\": true,\r\n  \"smUrl\": \"http://172.28.12.54:80\",\r\n  \"smKey\": \"1TAHduOH5EAFjbkZKbUgWCejPrydCoq1\",\r\n  \"defaults\": {\r\n    \"userLevel\": \"{{default_User_Level}}\",\r\n    \"markerLevel\": \"{{default_Marker_Level}}\"\r\n  },\r\n  \"modules\": {\r\n    \"Floorplans\": true,\r\n    \"LDAP\": false,\r\n    \"ResetPassword\": true,\r\n    \"CustomLinks\": true,\r\n    \"Twitter\": true,\r\n    \"LocalStorage\": false\r\n  },\r\n  \"twitter\": {\r\n    \"consumerKey\": \"9uDJNMGaQGG24hp27aD3iFcyX\",\r\n    \"consumerSecret\": \"Sn3KLh4laj2BbpJhMCZTOLNdkwxjUArKDGA1f3mbRPOsdIM5WL\",\r\n    \"accessTokenKey\": \"1000010913930530817-RU8aCFKvB8yWbwpS6R1KtdEdJML7qO\",\r\n    \"accessTokenSecret\": \"HTnewjIIR3KfEHQf4HWSSArcsCWmzrvzFt9YSpwQ3S8YO\"\r\n  },\r\n  \"inactivityLimits\": {\r\n    \"globalAdmin\": 28800000,\r\n    \"localAdmin\": 28800000,\r\n    \"operator\": 28800000\r\n  },\r\n  \"logoutOnDisconnect\": true\r\n}"
            },
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "ee681dbe-0a40-4948-8060-18582c9d0863",
          "name": "Edit app config - edit app title over 80 chars",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e2e537b1-b191-424e-96d3-927bfefe03ed",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"C44642 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(500);",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    pm.expect(jsonData.results).to.eql(null);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql([",
                  "        \"appConfig title exceeded maximum length of 80.\"",
                  "    ]);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44642 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C44642 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"waytoomanywaytoomanywaytoomanywaytoomanywaytoomanywaytoomanywaytoomanywaytoomanywaytoomanywaytoomanywaytoomanywaytoomanywaytoomany\",\r\n  \"map\": \"OpenLayers\",\r\n  \"server\": \"http://144.202.244.154/v2/chart/\",\r\n  \"mail\": {\r\n    \"email\": \"claris-admin@skylinenet.net\",\r\n    \"server\": \"https://skylinedemo.com\",\r\n    \"direct\": true,\r\n    \"smtp\": {\r\n      \"use\": false\r\n    },\r\n    \"service\": {\r\n      \"type\": \"none\"\r\n    }\r\n  },\r\n  \"smIntegration\": true,\r\n  \"smUrl\": \"http://172.28.12.54:80\",\r\n  \"smKey\": \"1TAHduOH5EAFjbkZKbUgWCejPrydCoq1\",\r\n  \"defaults\": {\r\n    \"userLevel\": \"{{default_User_Level}}\",\r\n    \"markerLevel\": \"{{default_Marker_Level}}\"\r\n  },\r\n  \"modules\": {\r\n    \"Floorplans\": true,\r\n    \"LDAP\": false,\r\n    \"ResetPassword\": true,\r\n    \"CustomLinks\": true,\r\n    \"Twitter\": true,\r\n    \"LocalStorage\": false\r\n  },\r\n  \"twitter\": {\r\n    \"consumerKey\": \"9uDJNMGaQGG24hp27aD3iFcyX\",\r\n    \"consumerSecret\": \"Sn3KLh4laj2BbpJhMCZTOLNdkwxjUArKDGA1f3mbRPOsdIM5WL\",\r\n    \"accessTokenKey\": \"1000010913930530817-RU8aCFKvB8yWbwpS6R1KtdEdJML7qO\",\r\n    \"accessTokenSecret\": \"HTnewjIIR3KfEHQf4HWSSArcsCWmzrvzFt9YSpwQ3S8YO\"\r\n  },\r\n  \"inactivityLimits\": {\r\n    \"globalAdmin\": 28800000,\r\n    \"localAdmin\": 28800000,\r\n    \"operator\": 28800000\r\n  },\r\n  \"logoutOnDisconnect\": true\r\n}"
            },
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "4e719867-faa6-498d-b08b-92c4b71373fb",
          "name": "Edit app config - edit map server address",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e698cbf9-a6da-48ab-a17b-8cd11a059e8f",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"C44637 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.server).to.eql(\"http://143.202.244.154/v2/chart/\");",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44637 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C44637 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"OneView 3.4\",\r\n  \"map\": \"OpenLayers\",\r\n  \"server\": \"http://143.202.244.154/v2/chart/\",\r\n  \"mail\": {\r\n    \"email\": \"claris-admin@skylinenet.net\",\r\n    \"server\": \"https://skylinedemo.com\",\r\n    \"direct\": true,\r\n    \"smtp\": {\r\n      \"use\": false\r\n    },\r\n    \"service\": {\r\n      \"type\": \"none\"\r\n    }\r\n  },\r\n  \"smIntegration\": true,\r\n  \"smUrl\": \"http://172.28.12.54:80\",\r\n  \"smKey\": \"1TAHduOH5EAFjbkZKbUgWCejPrydCoq1\",\r\n  \"defaults\": {\r\n    \"userLevel\": \"{{default_User_Level}}\",\r\n    \"markerLevel\": \"{{default_Marker_Level}}\"\r\n  },\r\n  \"modules\": {\r\n    \"Floorplans\": true,\r\n    \"LDAP\": false,\r\n    \"ResetPassword\": true,\r\n    \"CustomLinks\": true,\r\n    \"Twitter\": true,\r\n    \"LocalStorage\": false\r\n  },\r\n  \"twitter\": {\r\n    \"consumerKey\": \"9uDJNMGaQGG24hp27aD3iFcyX\",\r\n    \"consumerSecret\": \"Sn3KLh4laj2BbpJhMCZTOLNdkwxjUArKDGA1f3mbRPOsdIM5WL\",\r\n    \"accessTokenKey\": \"1000010913930530817-RU8aCFKvB8yWbwpS6R1KtdEdJML7qO\",\r\n    \"accessTokenSecret\": \"HTnewjIIR3KfEHQf4HWSSArcsCWmzrvzFt9YSpwQ3S8YO\"\r\n  },\r\n  \"inactivityLimits\": {\r\n    \"globalAdmin\": 28800000,\r\n    \"localAdmin\": 28800000,\r\n    \"operator\": 28800000\r\n  },\r\n  \"logoutOnDisconnect\": true\r\n}"
            },
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "66be5033-d05e-4d82-b8aa-d247ae46a2c1",
          "name": "Edit app config - disabled twitter",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "be4fb6dc-d18a-4c4e-9e1b-ea6c20857fc4",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"C44650 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.twitter).to.eql({",
                  "            \"consumerKey\": \"\",",
                  "            \"consumerSecret\": \"\",",
                  "            \"accessTokenKey\": \"\",",
                  "            \"accessTokenSecret\": \"\"",
                  "        });",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44650 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C44650 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"OneView 3.4\",\r\n  \"map\": \"OpenLayers\",\r\n  \"server\": \"http://144.202.244.154/v2/chart/\",\r\n  \"mail\": {\r\n    \"email\": \"claris-admin@skylinenet.net\",\r\n    \"server\": \"https://skylinedemo.com\",\r\n    \"direct\": true,\r\n    \"smtp\": {\r\n      \"use\": false\r\n    },\r\n    \"service\": {\r\n      \"type\": \"none\"\r\n    }\r\n  },\r\n  \"smIntegration\": true,\r\n  \"smUrl\": \"http://172.28.12.54:80\",\r\n  \"smKey\": \"1TAHduOH5EAFjbkZKbUgWCejPrydCoq1\",\r\n  \"defaults\": {\r\n    \"userLevel\": \"{{default_User_Level}}\",\r\n    \"markerLevel\": \"{{default_Marker_Level}}\"\r\n  },\r\n  \"modules\": {\r\n    \"Floorplans\": true,\r\n    \"LDAP\": false,\r\n    \"ResetPassword\": true,\r\n    \"CustomLinks\": true,\r\n    \"Twitter\": false,\r\n    \"LocalStorage\": false\r\n  },\r\n  \"twitter\": {\r\n    \"consumerKey\": \"\",\r\n    \"consumerSecret\": \"\",\r\n    \"accessTokenKey\": \"\",\r\n    \"accessTokenSecret\": \"\"\r\n  },\r\n  \"inactivityLimits\": {\r\n    \"globalAdmin\": 28800000,\r\n    \"localAdmin\": 28800000,\r\n    \"operator\": 28800000\r\n  },\r\n  \"logoutOnDisconnect\": true\r\n}"
            },
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "ae8ef51f-081a-4394-b610-cd3386be83ff",
          "name": "Edit app config - disabled SM integration",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6203303d-cb8d-492a-9ae9-9da40606c75a",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"C44653 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.smIntegration).to.eql(false);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44653 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C44653 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"OneView 3.4\",\r\n  \"map\": \"Google Maps\",\r\n  \"server\": \"http://144.202.244.154/v2/chart/\",\r\n  \"mail\": {\r\n    \"email\": \"claris-admin@skylinenet.net\",\r\n    \"server\": \"https://skylinedemo.com\",\r\n    \"direct\": true,\r\n    \"smtp\": {\r\n      \"use\": false\r\n    },\r\n    \"service\": {\r\n      \"type\": \"none\"\r\n    }\r\n  },\r\n  \"smIntegration\": false,\r\n  \"smUrl\": \"http://172.28.12.54:80\",\r\n  \"smKey\": \"1TAHduOH5EAFjbkZKbUgWCejPrydCoq1\",\r\n  \"defaults\": {\r\n    \"userLevel\": \"{{default_User_Level}}\",\r\n    \"markerLevel\": \"{{default_Marker_Level}}\"\r\n  },\r\n  \"modules\": {\r\n    \"Floorplans\": true,\r\n    \"LDAP\": false,\r\n    \"ResetPassword\": true,\r\n    \"CustomLinks\": true,\r\n    \"Twitter\": true,\r\n    \"LocalStorage\": false\r\n  },\r\n  \"twitter\": {\r\n    \"consumerKey\": \"9uDJNMGaQGG24hp27aD3iFcyX\",\r\n    \"consumerSecret\": \"Sn3KLh4laj2BbpJhMCZTOLNdkwxjUArKDGA1f3mbRPOsdIM5WL\",\r\n    \"accessTokenKey\": \"1000010913930530817-RU8aCFKvB8yWbwpS6R1KtdEdJML7qO\",\r\n    \"accessTokenSecret\": \"HTnewjIIR3KfEHQf4HWSSArcsCWmzrvzFt9YSpwQ3S8YO\"\r\n  },\r\n  \"inactivityLimits\": {\r\n    \"globalAdmin\": 28800000,\r\n    \"localAdmin\": 28800000,\r\n    \"operator\": 28800000\r\n  },\r\n  \"logoutOnDisconnect\": true\r\n}"
            },
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "59cc6113-840e-4663-91b5-56174a34a9a4",
          "name": "Edit app config - enable twitter",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e5345285-943c-4cc6-96d3-00857b1faf21",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"C44657 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.modules.Twitter).to.eql(true);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44657 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C44657 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"OneView 3.4\",\r\n  \"map\": \"Google Maps\",\r\n  \"server\": \"http://144.202.244.154/v2/chart/\",\r\n  \"mail\": {\r\n    \"email\": \"claris-admin@skylinenet.net\",\r\n    \"server\": \"https://skylinedemo.com\",\r\n    \"direct\": true,\r\n    \"smtp\": {\r\n      \"use\": false\r\n    },\r\n    \"service\": {\r\n      \"type\": \"none\"\r\n    }\r\n  },\r\n  \"smIntegration\": true,\r\n  \"smUrl\": \"http://172.28.12.54:80\",\r\n  \"smKey\": \"1TAHduOH5EAFjbkZKbUgWCejPrydCoq1\",\r\n  \"defaults\": {\r\n    \"userLevel\": \"{{default_User_Level}}\",\r\n    \"markerLevel\": \"{{default_Marker_Level}}\"\r\n  },\r\n  \"modules\": {\r\n    \"Floorplans\": true,\r\n    \"LDAP\": false,\r\n    \"ResetPassword\": true,\r\n    \"CustomLinks\": true,\r\n    \"Twitter\": true,\r\n    \"LocalStorage\": false\r\n  },\r\n  \"twitter\": {\r\n    \"consumerKey\": \"9uDJNMGaQGG24hp27aD3iFcyX\",\r\n    \"consumerSecret\": \"Sn3KLh4laj2BbpJhMCZTOLNdkwxjUArKDGA1f3mbRPOsdIM5WL\",\r\n    \"accessTokenKey\": \"1000010913930530817-RU8aCFKvB8yWbwpS6R1KtdEdJML7qO\",\r\n    \"accessTokenSecret\": \"HTnewjIIR3KfEHQf4HWSSArcsCWmzrvzFt9YSpwQ3S8YO\"\r\n  },\r\n  \"inactivityLimits\": {\r\n    \"globalAdmin\": 28800000,\r\n    \"localAdmin\": 28800000,\r\n    \"operator\": 28800000\r\n  },\r\n  \"logoutOnDisconnect\": true\r\n}"
            },
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "8402c5df-d3ff-43b9-95b8-737ba6feeed0",
          "name": "Edit app config - enable SM integration",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8666ed52-0101-40a8-b430-73d5eefea8d1",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"C44653 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.smIntegration).to.eql(true);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44653 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C44653 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"OneView 3.4\",\r\n  \"map\": \"Google Maps\",\r\n  \"server\": \"http://144.202.244.154/v2/chart/\",\r\n  \"mail\": {\r\n    \"email\": \"claris-admin@skylinenet.net\",\r\n    \"server\": \"https://skylinedemo.com\",\r\n    \"direct\": true,\r\n    \"smtp\": {\r\n      \"use\": false\r\n    },\r\n    \"service\": {\r\n      \"type\": \"none\"\r\n    }\r\n  },\r\n  \"smIntegration\": true,\r\n  \"smUrl\": \"http://172.28.12.54:80\",\r\n  \"smKey\": \"1TAHduOH5EAFjbkZKbUgWCejPrydCoq1\",\r\n  \"defaults\": {\r\n    \"userLevel\": \"{{default_User_Level}}\",\r\n    \"markerLevel\": \"{{default_Marker_Level}}\"\r\n  },\r\n  \"modules\": {\r\n    \"Floorplans\": true,\r\n    \"LDAP\": false,\r\n    \"ResetPassword\": true,\r\n    \"CustomLinks\": true,\r\n    \"Twitter\": true,\r\n    \"LocalStorage\": false\r\n  },\r\n  \"twitter\": {\r\n    \"consumerKey\": \"9uDJNMGaQGG24hp27aD3iFcyX\",\r\n    \"consumerSecret\": \"Sn3KLh4laj2BbpJhMCZTOLNdkwxjUArKDGA1f3mbRPOsdIM5WL\",\r\n    \"accessTokenKey\": \"1000010913930530817-RU8aCFKvB8yWbwpS6R1KtdEdJML7qO\",\r\n    \"accessTokenSecret\": \"HTnewjIIR3KfEHQf4HWSSArcsCWmzrvzFt9YSpwQ3S8YO\"\r\n  },\r\n  \"inactivityLimits\": {\r\n    \"globalAdmin\": 28800000,\r\n    \"localAdmin\": 28800000,\r\n    \"operator\": 28800000\r\n  },\r\n  \"logoutOnDisconnect\": true\r\n}"
            },
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "532fc814-5d0e-408a-a91c-34c6114a7c04",
          "name": "Edit app config - disable links",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "72805a3f-cac5-4d39-b451-67677e4599a8",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"C44655 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.modules.CustomLinks).to.eql(false);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44655 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C44655 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"OneView 3.4\",\r\n  \"map\": \"Google Maps\",\r\n  \"server\": \"http://144.202.244.154/v2/chart/\",\r\n  \"mail\": {\r\n    \"email\": \"claris-admin@skylinenet.net\",\r\n    \"server\": \"https://skylinedemo.com\",\r\n    \"direct\": true,\r\n    \"smtp\": {\r\n      \"use\": false\r\n    },\r\n    \"service\": {\r\n      \"type\": \"none\"\r\n    }\r\n  },\r\n  \"smIntegration\": true,\r\n  \"smUrl\": \"http://172.28.12.54:80\",\r\n  \"smKey\": \"1TAHduOH5EAFjbkZKbUgWCejPrydCoq1\",\r\n  \"defaults\": {\r\n    \"userLevel\": \"{{default_User_Level}}\",\r\n    \"markerLevel\": \"{{default_Marker_Level}}\"\r\n  },\r\n  \"modules\": {\r\n    \"Floorplans\": true,\r\n    \"LDAP\": false,\r\n    \"ResetPassword\": true,\r\n    \"CustomLinks\": false,\r\n    \"Twitter\": true,\r\n    \"LocalStorage\": false\r\n  },\r\n  \"twitter\": {\r\n    \"consumerKey\": \"9uDJNMGaQGG24hp27aD3iFcyX\",\r\n    \"consumerSecret\": \"Sn3KLh4laj2BbpJhMCZTOLNdkwxjUArKDGA1f3mbRPOsdIM5WL\",\r\n    \"accessTokenKey\": \"1000010913930530817-RU8aCFKvB8yWbwpS6R1KtdEdJML7qO\",\r\n    \"accessTokenSecret\": \"HTnewjIIR3KfEHQf4HWSSArcsCWmzrvzFt9YSpwQ3S8YO\"\r\n  },\r\n  \"inactivityLimits\": {\r\n    \"globalAdmin\": 28800000,\r\n    \"localAdmin\": 28800000,\r\n    \"operator\": 28800000\r\n  },\r\n  \"logoutOnDisconnect\": true\r\n}"
            },
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "303252c0-3d77-4742-8e94-79cb5250eb21",
          "name": "Edit app config - enable links",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0956b559-4529-40a8-9216-b09957606684",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"C73604 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.modules.CustomLinks).to.eql(true);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C73604 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C73604 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"OneView 3.4\",\r\n  \"map\": \"Google Maps\",\r\n  \"server\": \"http://144.202.244.154/v2/chart/\",\r\n  \"mail\": {\r\n    \"email\": \"claris-admin@skylinenet.net\",\r\n    \"server\": \"https://skylinedemo.com\",\r\n    \"direct\": true,\r\n    \"smtp\": {\r\n      \"use\": false\r\n    },\r\n    \"service\": {\r\n      \"type\": \"none\"\r\n    }\r\n  },\r\n  \"smIntegration\": true,\r\n  \"smUrl\": \"http://172.28.12.54:80\",\r\n  \"smKey\": \"1TAHduOH5EAFjbkZKbUgWCejPrydCoq1\",\r\n  \"defaults\": {\r\n    \"userLevel\": \"{{default_User_Level}}\",\r\n    \"markerLevel\": \"{{default_Marker_Level}}\"\r\n  },\r\n  \"modules\": {\r\n    \"Floorplans\": true,\r\n    \"LDAP\": false,\r\n    \"ResetPassword\": true,\r\n    \"CustomLinks\": true,\r\n    \"Twitter\": true,\r\n    \"LocalStorage\": false\r\n  },\r\n  \"twitter\": {\r\n    \"consumerKey\": \"9uDJNMGaQGG24hp27aD3iFcyX\",\r\n    \"consumerSecret\": \"Sn3KLh4laj2BbpJhMCZTOLNdkwxjUArKDGA1f3mbRPOsdIM5WL\",\r\n    \"accessTokenKey\": \"1000010913930530817-RU8aCFKvB8yWbwpS6R1KtdEdJML7qO\",\r\n    \"accessTokenSecret\": \"HTnewjIIR3KfEHQf4HWSSArcsCWmzrvzFt9YSpwQ3S8YO\"\r\n  },\r\n  \"inactivityLimits\": {\r\n    \"globalAdmin\": 28800000,\r\n    \"localAdmin\": 28800000,\r\n    \"operator\": 28800000\r\n  },\r\n  \"logoutOnDisconnect\": true\r\n}"
            },
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "a9f06518-1b94-4311-bb5c-14d13c054f75",
          "name": "Edit app config - disable direct mail",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d4e5c91e-fb5e-4554-8ee7-1b2e69e56c07",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"C44668 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.mail.direct).to.eql(false);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44668 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C44668 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"OneView 3.4\",\r\n  \"map\": \"Google Maps\",\r\n  \"server\": \"http://144.202.244.154/v2/chart/\",\r\n  \"mail\": {\r\n    \"email\": \"claris-admin@skylinenet.net\",\r\n    \"server\": \"https://skylinedemo.com\",\r\n    \"direct\": false,\r\n    \"smtp\": {\r\n      \"use\": false\r\n    },\r\n    \"service\": {\r\n      \"type\": \"none\"\r\n    }\r\n  },\r\n  \"smIntegration\": true,\r\n  \"smUrl\": \"http://172.28.12.54:80\",\r\n  \"smKey\": \"1TAHduOH5EAFjbkZKbUgWCejPrydCoq1\",\r\n  \"defaults\": {\r\n    \"userLevel\": \"{{default_User_Level}}\",\r\n    \"markerLevel\": \"{{default_Marker_Level}}\"\r\n  },\r\n  \"modules\": {\r\n    \"Floorplans\": true,\r\n    \"LDAP\": false,\r\n    \"ResetPassword\": true,\r\n    \"CustomLinks\": true,\r\n    \"Twitter\": true,\r\n    \"LocalStorage\": false\r\n  },\r\n  \"twitter\": {\r\n    \"consumerKey\": \"9uDJNMGaQGG24hp27aD3iFcyX\",\r\n    \"consumerSecret\": \"Sn3KLh4laj2BbpJhMCZTOLNdkwxjUArKDGA1f3mbRPOsdIM5WL\",\r\n    \"accessTokenKey\": \"1000010913930530817-RU8aCFKvB8yWbwpS6R1KtdEdJML7qO\",\r\n    \"accessTokenSecret\": \"HTnewjIIR3KfEHQf4HWSSArcsCWmzrvzFt9YSpwQ3S8YO\"\r\n  },\r\n  \"inactivityLimits\": {\r\n    \"globalAdmin\": 28800000,\r\n    \"localAdmin\": 28800000,\r\n    \"operator\": 28800000\r\n  },\r\n  \"logoutOnDisconnect\": true\r\n}"
            },
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "07ffb512-ca1f-46b0-b2e7-ad92bf4ac1ed",
          "name": "Edit app config - enable direct mail",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1d83b098-bc2a-4283-b284-91637130d904",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"C44667 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.mail.direct).to.eql(true);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44667 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C44667 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"OneView 3.4\",\r\n  \"map\": \"Google Maps\",\r\n  \"server\": \"http://144.202.244.154/v2/chart/\",\r\n  \"mail\": {\r\n    \"email\": \"claris-admin@skylinenet.net\",\r\n    \"server\": \"https://skylinedemo.com\",\r\n    \"direct\": true,\r\n    \"smtp\": {\r\n      \"use\": false\r\n    },\r\n    \"service\": {\r\n      \"type\": \"none\"\r\n    }\r\n  },\r\n  \"smIntegration\": true,\r\n  \"smUrl\": \"http://172.28.12.54:80\",\r\n  \"smKey\": \"1TAHduOH5EAFjbkZKbUgWCejPrydCoq1\",\r\n  \"defaults\": {\r\n    \"userLevel\": \"{{default_User_Level}}\",\r\n    \"markerLevel\": \"{{default_Marker_Level}}\"\r\n  },\r\n  \"modules\": {\r\n    \"Floorplans\": true,\r\n    \"LDAP\": false,\r\n    \"ResetPassword\": true,\r\n    \"CustomLinks\": true,\r\n    \"Twitter\": true,\r\n    \"LocalStorage\": false\r\n  },\r\n  \"twitter\": {\r\n    \"consumerKey\": \"9uDJNMGaQGG24hp27aD3iFcyX\",\r\n    \"consumerSecret\": \"Sn3KLh4laj2BbpJhMCZTOLNdkwxjUArKDGA1f3mbRPOsdIM5WL\",\r\n    \"accessTokenKey\": \"1000010913930530817-RU8aCFKvB8yWbwpS6R1KtdEdJML7qO\",\r\n    \"accessTokenSecret\": \"HTnewjIIR3KfEHQf4HWSSArcsCWmzrvzFt9YSpwQ3S8YO\"\r\n  },\r\n  \"inactivityLimits\": {\r\n    \"globalAdmin\": 28800000,\r\n    \"localAdmin\": 28800000,\r\n    \"operator\": 28800000\r\n  },\r\n  \"logoutOnDisconnect\": true\r\n}"
            },
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "4af827f8-afd1-454a-a50f-bfc29033230f",
          "name": "Edit app config - edit mail service email",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ff3bdefc-f343-481d-bbce-3853eab2ca96",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"C44666 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.mail.email).to.eql(\"jpeeling@skylinenet.net\");",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44666 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C44666 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"OneView 3.4\",\r\n  \"map\": \"Google Maps\",\r\n  \"server\": \"http://144.202.244.154/v2/chart/\",\r\n  \"mail\": {\r\n    \"email\": \"jpeeling@skylinenet.net\",\r\n    \"server\": \"https://skylinedemo.com\",\r\n    \"direct\": true,\r\n    \"smtp\": {\r\n      \"use\": false\r\n    },\r\n    \"service\": {\r\n      \"type\": \"none\"\r\n    }\r\n  },\r\n  \"smIntegration\": true,\r\n  \"smUrl\": \"http://172.28.12.54:80\",\r\n  \"smKey\": \"1TAHduOH5EAFjbkZKbUgWCejPrydCoq1\",\r\n  \"defaults\": {\r\n    \"userLevel\": \"{{default_User_Level}}\",\r\n    \"markerLevel\": \"{{default_Marker_Level}}\"\r\n  },\r\n  \"modules\": {\r\n    \"Floorplans\": true,\r\n    \"LDAP\": false,\r\n    \"ResetPassword\": true,\r\n    \"CustomLinks\": true,\r\n    \"Twitter\": true,\r\n    \"LocalStorage\": false\r\n  },\r\n  \"twitter\": {\r\n    \"consumerKey\": \"9uDJNMGaQGG24hp27aD3iFcyX\",\r\n    \"consumerSecret\": \"Sn3KLh4laj2BbpJhMCZTOLNdkwxjUArKDGA1f3mbRPOsdIM5WL\",\r\n    \"accessTokenKey\": \"1000010913930530817-RU8aCFKvB8yWbwpS6R1KtdEdJML7qO\",\r\n    \"accessTokenSecret\": \"HTnewjIIR3KfEHQf4HWSSArcsCWmzrvzFt9YSpwQ3S8YO\"\r\n  },\r\n  \"inactivityLimits\": {\r\n    \"globalAdmin\": 28800000,\r\n    \"localAdmin\": 28800000,\r\n    \"operator\": 28800000\r\n  },\r\n  \"logoutOnDisconnect\": true\r\n}"
            },
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "989fd746-6976-401e-bcab-2f646b4a90b7",
          "name": "Edit app config - edit mail service domain name / ip",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c0ae0669-f485-4b7e-a9d9-657dbf70ebbe",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"C73605 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.mail.server).to.eql(\"https://skylinedemoEDITED.com\");",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C73605 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C73605 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"OneView 3.4\",\r\n  \"map\": \"Google Maps\",\r\n  \"server\": \"http://144.202.244.154/v2/chart/\",\r\n  \"mail\": {\r\n    \"email\": \"claris-admin@skylinenet.net\",\r\n    \"server\": \"https://skylinedemoEDITED.com\",\r\n    \"direct\": true,\r\n    \"smtp\": {\r\n      \"use\": false\r\n    },\r\n    \"service\": {\r\n      \"type\": \"none\"\r\n    }\r\n  },\r\n  \"smIntegration\": true,\r\n  \"smUrl\": \"http://172.28.12.54:80\",\r\n  \"smKey\": \"1TAHduOH5EAFjbkZKbUgWCejPrydCoq1\",\r\n  \"defaults\": {\r\n    \"userLevel\": \"{{default_User_Level}}\",\r\n    \"markerLevel\": \"{{default_Marker_Level}}\"\r\n  },\r\n  \"modules\": {\r\n    \"Floorplans\": true,\r\n    \"LDAP\": false,\r\n    \"ResetPassword\": true,\r\n    \"CustomLinks\": true,\r\n    \"Twitter\": true,\r\n    \"LocalStorage\": false\r\n  },\r\n  \"twitter\": {\r\n    \"consumerKey\": \"9uDJNMGaQGG24hp27aD3iFcyX\",\r\n    \"consumerSecret\": \"Sn3KLh4laj2BbpJhMCZTOLNdkwxjUArKDGA1f3mbRPOsdIM5WL\",\r\n    \"accessTokenKey\": \"1000010913930530817-RU8aCFKvB8yWbwpS6R1KtdEdJML7qO\",\r\n    \"accessTokenSecret\": \"HTnewjIIR3KfEHQf4HWSSArcsCWmzrvzFt9YSpwQ3S8YO\"\r\n  },\r\n  \"inactivityLimits\": {\r\n    \"globalAdmin\": 28800000,\r\n    \"localAdmin\": 28800000,\r\n    \"operator\": 28800000\r\n  },\r\n  \"logoutOnDisconnect\": true\r\n}"
            },
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "d9445425-e0a5-45f1-931f-001617f4a5d9",
          "name": "Edit app config - edit default user level",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ff3b4de3-bebe-4856-af86-f3855ce46e36",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"C44679 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var userlevel = pm.environment.get(\"level_id\");",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.defaults.userLevel._id).to.eql(userlevel);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44679 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C44679 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"OneView 3.4\",\r\n  \"map\": \"Google Maps\",\r\n  \"server\": \"http://144.202.244.154/v2/chart/\",\r\n  \"mail\": {\r\n    \"email\": \"jpeeling@skylinenet.net\",\r\n    \"server\": \"https://skylinedemo.com\",\r\n    \"direct\": true,\r\n    \"smtp\": {\r\n      \"use\": false\r\n    },\r\n    \"service\": {\r\n      \"type\": \"none\"\r\n    }\r\n  },\r\n  \"smIntegration\": true,\r\n  \"smUrl\": \"http://172.28.12.54:80\",\r\n  \"smKey\": \"1TAHduOH5EAFjbkZKbUgWCejPrydCoq1\",\r\n  \"defaults\": {\r\n    \"userLevel\": \"{{default_User_Level}}\",\r\n    \"markerLevel\": \"{{default_Marker_Level}}\"\r\n  },\r\n  \"modules\": {\r\n    \"Floorplans\": true,\r\n    \"LDAP\": false,\r\n    \"ResetPassword\": true,\r\n    \"CustomLinks\": true,\r\n    \"Twitter\": true,\r\n    \"LocalStorage\": false\r\n  },\r\n  \"twitter\": {\r\n    \"consumerKey\": \"9uDJNMGaQGG24hp27aD3iFcyX\",\r\n    \"consumerSecret\": \"Sn3KLh4laj2BbpJhMCZTOLNdkwxjUArKDGA1f3mbRPOsdIM5WL\",\r\n    \"accessTokenKey\": \"1000010913930530817-RU8aCFKvB8yWbwpS6R1KtdEdJML7qO\",\r\n    \"accessTokenSecret\": \"HTnewjIIR3KfEHQf4HWSSArcsCWmzrvzFt9YSpwQ3S8YO\"\r\n  },\r\n  \"inactivityLimits\": {\r\n    \"globalAdmin\": 28800000,\r\n    \"localAdmin\": 28800000,\r\n    \"operator\": 28800000\r\n  },\r\n  \"logoutOnDisconnect\": true\r\n}"
            },
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "86da68c4-b745-4323-ae38-f2baa49b1d19",
          "name": "Edit app config - edit default marker device group level",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1464f9df-f084-4048-ad03-7be80d18d429",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"C44680 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var markerlevel = pm.environment.get(\"lev1_id\");",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.defaults.markerLevel._id).to.eql(markerlevel);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44680 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C44680 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"OneView 3.4\",\r\n  \"map\": \"Google Maps\",\r\n  \"server\": \"http://144.202.244.154/v2/chart/\",\r\n  \"mail\": {\r\n    \"email\": \"jpeeling@skylinenet.net\",\r\n    \"server\": \"https://skylinedemo.com\",\r\n    \"direct\": true,\r\n    \"smtp\": {\r\n      \"use\": false\r\n    },\r\n    \"service\": {\r\n      \"type\": \"none\"\r\n    }\r\n  },\r\n  \"smIntegration\": true,\r\n  \"smUrl\": \"http://172.28.12.54:80\",\r\n  \"smKey\": \"1TAHduOH5EAFjbkZKbUgWCejPrydCoq1\",\r\n  \"defaults\": {\r\n    \"userLevel\": \"{{default_User_Level}}\",\r\n    \"markerLevel\": \"{{default_Marker_Level}}\"\r\n  },\r\n  \"modules\": {\r\n    \"Floorplans\": true,\r\n    \"LDAP\": false,\r\n    \"ResetPassword\": true,\r\n    \"CustomLinks\": true,\r\n    \"Twitter\": true,\r\n    \"LocalStorage\": false\r\n  },\r\n  \"twitter\": {\r\n    \"consumerKey\": \"9uDJNMGaQGG24hp27aD3iFcyX\",\r\n    \"consumerSecret\": \"Sn3KLh4laj2BbpJhMCZTOLNdkwxjUArKDGA1f3mbRPOsdIM5WL\",\r\n    \"accessTokenKey\": \"1000010913930530817-RU8aCFKvB8yWbwpS6R1KtdEdJML7qO\",\r\n    \"accessTokenSecret\": \"HTnewjIIR3KfEHQf4HWSSArcsCWmzrvzFt9YSpwQ3S8YO\"\r\n  },\r\n  \"inactivityLimits\": {\r\n    \"globalAdmin\": 28800000,\r\n    \"localAdmin\": 28800000,\r\n    \"operator\": 28800000\r\n  },\r\n  \"logoutOnDisconnect\": true\r\n}"
            },
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "3007202b-9365-4586-842f-d25d5b566e21",
          "name": "Edit app config - disable floor plans",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3b41ff33-9dce-42c1-b8d4-9504aaf46611",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"C44684 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.modules.Floorplans).to.eql(false);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44684 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C44684 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"OneView 3.4\",\r\n  \"map\": \"Google Maps\",\r\n  \"server\": \"http://144.202.244.154/v2/chart/\",\r\n  \"mail\": {\r\n    \"email\": \"jpeeling@skylinenet.net\",\r\n    \"server\": \"https://skylinedemo.com\",\r\n    \"direct\": true,\r\n    \"smtp\": {\r\n      \"use\": false\r\n    },\r\n    \"service\": {\r\n      \"type\": \"none\"\r\n    }\r\n  },\r\n  \"smIntegration\": true,\r\n  \"smUrl\": \"http://172.28.12.54:80\",\r\n  \"smKey\": \"1TAHduOH5EAFjbkZKbUgWCejPrydCoq1\",\r\n  \"defaults\": {\r\n    \"userLevel\": \"{{default_User_Level}}\",\r\n    \"markerLevel\": \"{{default_Marker_Level}}\"\r\n  },\r\n  \"modules\": {\r\n    \"Floorplans\": false,\r\n    \"LDAP\": false,\r\n    \"ResetPassword\": true,\r\n    \"CustomLinks\": true,\r\n    \"Twitter\": true,\r\n    \"LocalStorage\": false\r\n  },\r\n  \"twitter\": {\r\n    \"consumerKey\": \"9uDJNMGaQGG24hp27aD3iFcyX\",\r\n    \"consumerSecret\": \"Sn3KLh4laj2BbpJhMCZTOLNdkwxjUArKDGA1f3mbRPOsdIM5WL\",\r\n    \"accessTokenKey\": \"1000010913930530817-RU8aCFKvB8yWbwpS6R1KtdEdJML7qO\",\r\n    \"accessTokenSecret\": \"HTnewjIIR3KfEHQf4HWSSArcsCWmzrvzFt9YSpwQ3S8YO\"\r\n  },\r\n  \"inactivityLimits\": {\r\n    \"globalAdmin\": 28800000,\r\n    \"localAdmin\": 28800000,\r\n    \"operator\": 28800000\r\n  },\r\n  \"logoutOnDisconnect\": true\r\n}"
            },
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "cf71c64f-5619-4e89-8cf7-e29c6f8ee10e",
          "name": "Edit app config - enable floor plans",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0d7ecad6-bf78-4d5c-a507-6765f8c7aa64",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"C73606 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.modules.Floorplans).to.eql(true);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C73606 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C73606 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"OneView 3.4\",\r\n  \"map\": \"Google Maps\",\r\n  \"server\": \"http://144.202.244.154/v2/chart/\",\r\n  \"mail\": {\r\n    \"email\": \"jpeeling@skylinenet.net\",\r\n    \"server\": \"https://skylinedemo.com\",\r\n    \"direct\": true,\r\n    \"smtp\": {\r\n      \"use\": false\r\n    },\r\n    \"service\": {\r\n      \"type\": \"none\"\r\n    }\r\n  },\r\n  \"smIntegration\": true,\r\n  \"smUrl\": \"http://172.28.12.54:80\",\r\n  \"smKey\": \"1TAHduOH5EAFjbkZKbUgWCejPrydCoq1\",\r\n  \"defaults\": {\r\n    \"userLevel\": \"{{default_User_Level}}\",\r\n    \"markerLevel\": \"{{default_Marker_Level}}\"\r\n  },\r\n  \"modules\": {\r\n    \"Floorplans\": true,\r\n    \"LDAP\": false,\r\n    \"ResetPassword\": true,\r\n    \"CustomLinks\": true,\r\n    \"Twitter\": true,\r\n    \"LocalStorage\": false\r\n  },\r\n  \"twitter\": {\r\n    \"consumerKey\": \"9uDJNMGaQGG24hp27aD3iFcyX\",\r\n    \"consumerSecret\": \"Sn3KLh4laj2BbpJhMCZTOLNdkwxjUArKDGA1f3mbRPOsdIM5WL\",\r\n    \"accessTokenKey\": \"1000010913930530817-RU8aCFKvB8yWbwpS6R1KtdEdJML7qO\",\r\n    \"accessTokenSecret\": \"HTnewjIIR3KfEHQf4HWSSArcsCWmzrvzFt9YSpwQ3S8YO\"\r\n  },\r\n  \"inactivityLimits\": {\r\n    \"globalAdmin\": 28800000,\r\n    \"localAdmin\": 28800000,\r\n    \"operator\": 28800000\r\n  },\r\n  \"logoutOnDisconnect\": true\r\n}"
            },
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "a65570dc-838b-4dd2-b316-7ee7aef612a5",
          "name": "Edit app config - disable LDAP",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4722f37e-0bd5-46af-9b02-d2e90a831a09",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"C45130 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.modules.LDAP).to.eql(false);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C45130 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C45130 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"OneView 3.4\",\r\n  \"map\": \"Google Maps\",\r\n  \"server\": \"http://144.202.244.154/v2/chart/\",\r\n  \"mail\": {\r\n    \"email\": \"jpeeling@skylinenet.net\",\r\n    \"server\": \"https://skylinedemo.com\",\r\n    \"direct\": true,\r\n    \"smtp\": {\r\n      \"use\": false\r\n    },\r\n    \"service\": {\r\n      \"type\": \"none\"\r\n    }\r\n  },\r\n  \"smIntegration\": true,\r\n  \"smUrl\": \"http://172.28.12.54:80\",\r\n  \"smKey\": \"1TAHduOH5EAFjbkZKbUgWCejPrydCoq1\",\r\n  \"defaults\": {\r\n    \"userLevel\": \"{{default_User_Level}}\",\r\n    \"markerLevel\": \"{{default_Marker_Level}}\"\r\n  },\r\n  \"modules\": {\r\n    \"Floorplans\": true,\r\n    \"LDAP\": false,\r\n    \"ResetPassword\": true,\r\n    \"CustomLinks\": true,\r\n    \"Twitter\": true,\r\n    \"LocalStorage\": false\r\n  },\r\n  \"twitter\": {\r\n    \"consumerKey\": \"9uDJNMGaQGG24hp27aD3iFcyX\",\r\n    \"consumerSecret\": \"Sn3KLh4laj2BbpJhMCZTOLNdkwxjUArKDGA1f3mbRPOsdIM5WL\",\r\n    \"accessTokenKey\": \"1000010913930530817-RU8aCFKvB8yWbwpS6R1KtdEdJML7qO\",\r\n    \"accessTokenSecret\": \"HTnewjIIR3KfEHQf4HWSSArcsCWmzrvzFt9YSpwQ3S8YO\"\r\n  },\r\n  \"inactivityLimits\": {\r\n    \"globalAdmin\": 28800000,\r\n    \"localAdmin\": 28800000,\r\n    \"operator\": 28800000\r\n  },\r\n  \"logoutOnDisconnect\": true\r\n}"
            },
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "9c84d5a7-edca-45f3-9f75-467db145cd35",
          "name": "Edit app config - enable LDAP",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "01a00589-0655-4a7e-912d-cbc64d38d8d0",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"C73607 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.modules.LDAP).to.eql(true);",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C73607 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"C73607 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"OneView 3.4\",\r\n  \"map\": \"Google Maps\",\r\n  \"server\": \"http://144.202.244.154/v2/chart/\",\r\n  \"mail\": {\r\n    \"email\": \"jpeeling@skylinenet.net\",\r\n    \"server\": \"https://skylinedemo.com\",\r\n    \"direct\": true,\r\n    \"smtp\": {\r\n      \"use\": false\r\n    },\r\n    \"service\": {\r\n      \"type\": \"none\"\r\n    }\r\n  },\r\n  \"smIntegration\": true,\r\n  \"smUrl\": \"http://172.28.12.54:80\",\r\n  \"smKey\": \"1TAHduOH5EAFjbkZKbUgWCejPrydCoq1\",\r\n  \"defaults\": {\r\n    \"userLevel\": \"{{default_User_Level}}\",\r\n    \"markerLevel\": \"{{default_Marker_Level}}\"\r\n  },\r\n  \"modules\": {\r\n    \"Floorplans\": true,\r\n    \"LDAP\": true,\r\n    \"ResetPassword\": true,\r\n    \"CustomLinks\": true,\r\n    \"Twitter\": true,\r\n    \"LocalStorage\": false\r\n  },\r\n  \"twitter\": {\r\n    \"consumerKey\": \"9uDJNMGaQGG24hp27aD3iFcyX\",\r\n    \"consumerSecret\": \"Sn3KLh4laj2BbpJhMCZTOLNdkwxjUArKDGA1f3mbRPOsdIM5WL\",\r\n    \"accessTokenKey\": \"1000010913930530817-RU8aCFKvB8yWbwpS6R1KtdEdJML7qO\",\r\n    \"accessTokenSecret\": \"HTnewjIIR3KfEHQf4HWSSArcsCWmzrvzFt9YSpwQ3S8YO\"\r\n  },\r\n  \"inactivityLimits\": {\r\n    \"globalAdmin\": 28800000,\r\n    \"localAdmin\": 28800000,\r\n    \"operator\": 28800000\r\n  },\r\n  \"logoutOnDisconnect\": true\r\n}"
            },
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "319645ea-df88-42b6-b795-11c0e4d25121",
          "name": "Edit app config - oneview map",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "88dd53d2-ca49-4644-9823-75b04ecb4860",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"C44643 The id is not null\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results._id) !== null;",
                  "});",
                  "",
                  "pm.test(\"C44643 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.map).to.eql(\"OpenLayers\");",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44643 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "pm.test(\"C44643 Verify that created and modified fields are included in the response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results).to.have.property('created');",
                  "    pm.expect(jsonData.results).to.have.property('modified');",
                  "});",
                  "",
                  "pm.test(\"C44643 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"OneView 3.4\",\r\n  \"map\": \"OpenLayers\",\r\n  \"server\": \"http://144.202.244.154/v2/chart/\",\r\n  \"mail\": {\r\n    \"email\": \"claris-admin@skylinenet.net\",\r\n    \"server\": \"https://skylinedemo.com\",\r\n    \"direct\": true,\r\n    \"smtp\": {\r\n      \"use\": false\r\n    },\r\n    \"service\": {\r\n      \"type\": \"none\"\r\n    }\r\n  },\r\n  \"smIntegration\": true,\r\n  \"smUrl\": \"http://172.28.12.54:80\",\r\n  \"smKey\": \"1TAHduOH5EAFjbkZKbUgWCejPrydCoq1\",\r\n  \"defaults\": {\r\n    \"userLevel\": \"{{default_User_Level}}\",\r\n    \"markerLevel\": \"{{default_Marker_Level}}\"\r\n  },\r\n  \"modules\": {\r\n    \"Floorplans\": true,\r\n    \"LDAP\": false,\r\n    \"ResetPassword\": true,\r\n    \"CustomLinks\": true,\r\n    \"Twitter\": true,\r\n    \"LocalStorage\": false\r\n  },\r\n  \"twitter\": {\r\n    \"consumerKey\": \"9uDJNMGaQGG24hp27aD3iFcyX\",\r\n    \"consumerSecret\": \"Sn3KLh4laj2BbpJhMCZTOLNdkwxjUArKDGA1f3mbRPOsdIM5WL\",\r\n    \"accessTokenKey\": \"1000010913930530817-RU8aCFKvB8yWbwpS6R1KtdEdJML7qO\",\r\n    \"accessTokenSecret\": \"HTnewjIIR3KfEHQf4HWSSArcsCWmzrvzFt9YSpwQ3S8YO\"\r\n  },\r\n  \"inactivityLimits\": {\r\n    \"globalAdmin\": 28800000,\r\n    \"localAdmin\": 28800000,\r\n    \"operator\": 28800000\r\n  },\r\n  \"logoutOnDisconnect\": true\r\n}"
            },
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}"
          },
          "response": []
        },
        {
          "_postman_id": "0d76c28b-f90e-46b4-8a3f-083c2be3b999",
          "name": "Edit app config - google maps",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8e258c3b-cb78-4895-beb3-7cd72684c328",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"C44644 The id is not null\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results._id) !== null;",
                  "});",
                  "",
                  "pm.test(\"C44644 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.map).to.eql(\"Google Maps\");",
                  "    pm.expect(jsonData.warnings).to.eql(null);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44644 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "pm.test(\"C44644 Verify that created and modified fields are included in the response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results).to.have.property('created');",
                  "    pm.expect(jsonData.results).to.have.property('modified');",
                  "});",
                  "",
                  "pm.test(\"C44644 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"OneView 3.4\",\r\n  \"map\": \"Google Maps\",\r\n  \"server\": \"http://144.202.244.154/v2/chart/\",\r\n  \"mail\": {\r\n    \"email\": \"claris-admin@skylinenet.net\",\r\n    \"server\": \"https://skylinedemo.com\",\r\n    \"direct\": true,\r\n    \"smtp\": {\r\n      \"use\": false\r\n    },\r\n    \"service\": {\r\n      \"type\": \"none\"\r\n    }\r\n  },\r\n  \"smIntegration\": true,\r\n  \"smUrl\": \"http://172.28.12.54:80\",\r\n  \"smKey\": \"1TAHduOH5EAFjbkZKbUgWCejPrydCoq1\",\r\n  \"defaults\": {\r\n    \"userLevel\": \"{{default_User_Level}}\",\r\n    \"markerLevel\": \"{{default_Marker_Level}}\"\r\n  },\r\n  \"modules\": {\r\n    \"Floorplans\": true,\r\n    \"LDAP\": false,\r\n    \"ResetPassword\": true,\r\n    \"CustomLinks\": true,\r\n    \"Twitter\": true,\r\n    \"LocalStorage\": false\r\n  },\r\n  \"twitter\": {\r\n    \"consumerKey\": \"9uDJNMGaQGG24hp27aD3iFcyX\",\r\n    \"consumerSecret\": \"Sn3KLh4laj2BbpJhMCZTOLNdkwxjUArKDGA1f3mbRPOsdIM5WL\",\r\n    \"accessTokenKey\": \"1000010913930530817-RU8aCFKvB8yWbwpS6R1KtdEdJML7qO\",\r\n    \"accessTokenSecret\": \"HTnewjIIR3KfEHQf4HWSSArcsCWmzrvzFt9YSpwQ3S8YO\"\r\n  },\r\n  \"inactivityLimits\": {\r\n    \"globalAdmin\": 28800000,\r\n    \"localAdmin\": 28800000,\r\n    \"operator\": 28800000\r\n  },\r\n  \"logoutOnDisconnect\": true\r\n}"
            },
            "url": "http://{{url}}/api/appConfig/{{appconfig_ID}}"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "b65a8039-601a-403d-8fcd-2b081a5c3821",
      "name": "LDAP",
      "description": "",
      "item": [
        {
          "_postman_id": "571e5610-57db-4b3b-a2c7-391e70d8a8ef",
          "name": "Login valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b766dff9-f008-4e55-920a-b67bf7f4d71e",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"username\":\"{{current_user}}\",\"password\":\"{{password}}\",\"timezone\":\"America/New_York\"}"
            },
            "url": "https://{{url}}/api/login",
            "description": "Logs a user into claris.\n\nTriggered by:\nLogging into the site.\n\nTests:\n1) Status code is 200\n2) Body contains a field called 'authenticated', and that field is equal to true\n3) Response time < 200ms"
          },
          "response": []
        },
        {
          "_postman_id": "1bfe6b9d-5827-47f5-ab56-743e6eed2e62",
          "name": "Create an LDAP organization",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6818daf-b23a-46c9-aa91-b3974a982f69",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"LDAP Org222\",\n  \"contact\": \"Jenn\",\n  \"phone\": \"4100254562\",\n  \"recordVideo\": false,\n  \"videoRetentionNotes\": \"\",\n  \"primaryLocationName\": \"\",\n  \"primaryLocationAddress\": \"\",\n  \"primaryLocationCity\": \"\",\n  \"primaryLocationState\": \"\",\n  \"primaryLocationZipcode\": \"\",\n  \"administratorName\": {\n    \"first\": \"\",\n    \"last\": \"\"\n  },\n  \"administratorTitle\": \"\",\n  \"administratorEmail\": \"\",\n  \"administratorPhone\": \"\",\n  \"videoAdministratorName\": {\n    \"first\": \"\",\n    \"last\": \"\"\n  },\n  \"videoAdministratorTitle\": \"\",\n  \"videoAdministratorEmail\": \"\",\n  \"videoAdministratorPhone\": \"\",\n  \"authType\": \"LDAP Server\",\n  \"ldapConfig\": {\n    \"bindDn\": \"CN=QA Admin,OU=QA,OU=Development,DC=sky,DC=hss\",\n    \"bindSecret\": \"P@$$w0rd#1\",\n    \"searchBase\": \"OU=Development,DC=sky,DC=hss\",\n    \"searchAttribute\": \"samaccountname\",\n    \"connectionTimeout\": \"10\",\n    \"searchTimeout\": \"10\",\n    \"primary\": {\n      \"protocol\": \"ldap\",\n      \"host\": \"Hss-mclean-dc01.sky.hss\",\n      \"port\": \"389\"\n    },\n    \"backup\": {\n      \"protocol\": \"\",\n      \"host\": \"\",\n      \"port\": \"\"\n    }\n  }\n}"
            },
            "url": "https://{{url}}/api/organizations"
          },
          "response": []
        },
        {
          "_postman_id": "fa28c2c6-d007-4008-9f54-0d6d460ed6e2",
          "name": "Create an LDAP organization Copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6818daf-b23a-46c9-aa91-b3974a982f69",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"LDAP Org\",\n  \"contact\": \"Jenn\",\n  \"phone\": \"4100254562\",\n  \"recordVideo\": false,\n  \"videoRetentionNotes\": \"\",\n  \"primaryLocationName\": \"\",\n  \"primaryLocationAddress\": \"\",\n  \"primaryLocationCity\": \"\",\n  \"primaryLocationState\": \"\",\n  \"primaryLocationZipcode\": \"\",\n  \"administratorName\": {\n    \"first\": \"\",\n    \"last\": \"\"\n  },\n  \"administratorTitle\": \"\",\n  \"administratorEmail\": \"\",\n  \"administratorPhone\": \"\",\n  \"videoAdministratorName\": {\n    \"first\": \"\",\n    \"last\": \"\"\n  },\n  \"videoAdministratorTitle\": \"\",\n  \"videoAdministratorEmail\": \"\",\n  \"videoAdministratorPhone\": \"\",\n  \"authType\": \"LDAP Server\",\n  \"ldapConfig\": {\n    \"bindDn\": \"CN=QA Admin,OU=QA,OU=Development,DC=sky,DC=hss\",\n    \"bindSecret\": \"P@$$w0rd#1\",\n    \"searchBase\": \"OU=Development,DC=sky,DC=hss\",\n    \"searchAttribute\": \"samaccountname\",\n    \"connectionTimeout\": \"10\",\n    \"searchTimeout\": \"10\",\n    \"primary\": {\n      \"protocol\": \"ldap\",\n      \"host\": \"Hss-mclean-dc01.sky.hss\",\n      \"port\": \"389\"\n    },\n    \"backup\": {\n      \"protocol\": \"\",\n      \"host\": \"\",\n      \"port\": \"\"\n    }\n  }\n}"
            },
            "url": "http://{{url}}/api/organizations"
          },
          "response": []
        },
        {
          "_postman_id": "a62e4f98-f63d-48e3-a3ee-b56cc85e9e01",
          "name": "Create the LDAP user",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "721a2728-9f32-43c3-8696-a4c603e87f08",
                "exec": [
                  "pm.test(\"C44692 The id is not null\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results._id) !== null;",
                  "    pm.environment.unset(\"user_ID\");",
                  "    pm.environment.unset(\"user_Name\");",
                  "    pm.environment.set(\"user_ID\",jsonData.results._id);",
                  "    pm.environment.set(\"user_Name\",jsonData.results.username);",
                  "});",
                  "",
                  "pm.test(\"C44692 Verify code, success, results, warning and errors are present and have the proper value\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var user_Name = pm.environment.get(\"user_Name\");",
                  "    pm.expect(jsonData.code).to.eql(200);",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.results.username).to.eql(user_Name);",
                  "    pm.expect(jsonData.warnings).to.eql([]);",
                  "    pm.expect(jsonData.errors).to.eql(null);",
                  "});",
                  "",
                  "//This API returns a single record. So the results should be an object.",
                  "pm.test(\"C44692 Verify that the results is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData.results).to.eql(\"object\");",
                  "});",
                  "",
                  "pm.test(\"C44692 Verify that created and modified fields are included in the response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results).to.have.property('created');",
                  "    pm.expect(jsonData.results).to.have.property('modified');",
                  "});",
                  "",
                  "pm.test(\"C44692 Verify that status code in the response matches the HTTP status code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(responseCode.code);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"username\": \"qaadminyeah\",\n\t\"role_id\": \"{{user_operator_id}}\",\n\t\"name\": {\n\t\t\"first\": \"Nancy\",\n\t\t\"last\": \"Williams\"\n\t},\n\t\"email\": \"nwilliams{{$timestamp}}@test.com\",\n\t\"phones\": [],\n\t\"credentials\": [],\n\t\"level_id\": \"{{user_Level_ID}}\",\n\t\"regions\": [\n\t],\n\t\"jobTitle\": \"LDAP User\",\n\t\"department\": \"SysAdmin\",\n\t\"jobFunction\": \"123\",\n\t\"password\": \"Skyl1n3!\",\n\t\"devgroups\": [],\n\t\"organization_id\": \"5c181fc70d99131d0425349e\"\n}"
            },
            "url": "https://{{url}}/api/users"
          },
          "response": []
        },
        {
          "_postman_id": "b9630d30-514b-4d43-94af-343ae0bc5102",
          "name": "Logout valid Copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9cb51101-5c02-4a8b-85c7-97a37de2c7a7",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"C73585 Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"C73585 Success message is returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Logged out successfully\");",
                  "});",
                  "",
                  "pm.test(\"C73585 Response time is less than 200ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "http://{{url}}/api/logout",
            "description": "Log out user."
          },
          "response": []
        },
        {
          "_postman_id": "03976a1c-ac38-4124-ac7c-d38c821ea66f",
          "name": "Valid LDAP login",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b766dff9-f008-4e55-920a-b67bf7f4d71e",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"username\":\"qaadmin\",\"password\":\"P@$$w0rd#1\",\"timezone\":\"America/New_York\"}"
            },
            "url": "https://{{url}}/api/login",
            "description": "Logs a user into claris.\n\nTriggered by:\nLogging into the site.\n\nTests:\n1) Status code is 200\n2) Body contains a field called 'authenticated', and that field is equal to true\n3) Response time < 200ms"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "715b3ecd-2786-4441-9090-35c703f5d134",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "05d35e9b-889d-4305-af30-8422f36d5cdd",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}